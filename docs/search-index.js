var searchIndex = {};
searchIndex["glitter"] = {"doc":"A type-safe, zero-cost OpenGL abstraction.","items":[[0,"context","glitter","Home of [`ContextOf`](struct.ContextOf.html), which is the type that\nrepresents &quot;the OpenGL state machine&quot;, and the type you use to make\nOpenGL calls.",null,null],[3,"ContextOf","glitter::context","The type that represents the whole &quot;OpenGL state machine&quot;. This is the core\nof glitter&#39;s design, and what enables the notion of safety.",null,null],[0,"buffer_context","","Contains all of the OpenGL state types related to buffer objects.",null,null],[3,"ArrayBufferBinding","glitter::context::buffer_context","Represents a buffer that has been bound to the `GL_ARRAY_BUFFER`\nbinding target.",null,null],[3,"ElementArrayBufferBinding","","Represents a buffer that has been bound to the `GL_ELEMENT_ARRAY_BUFFER`\nbinding target.",null,null],[3,"BufferBinderOf","","This type holds all of the OpenGL-state-related buffer objects. See the\n[`ContextOf`](../struct.ContextOf.html) docs for more details.",null,null],[3,"ArrayBufferBinder","","The OpenGL state representing the `GL_ARRAY_BUFFER` target.",null,null],[3,"ElementArrayBufferBinder","","The OpenGL state representing the `GL_ELEMENT_ARRAY_BUFFER` target.",null,null],[6,"BufferBinder","","A part of the OpenGL context that has all free buffer bindings.",null,null],[8,"ContextBufferExt","","An extension trait that includes buffer-object-related OpenGL methods.",null,null],[11,"gen_buffer","","Create a new, empty OpenGL buffer object.",0,null],[11,"buffer_bytes","","Send data to a buffer object. Note that this will replace the buffer&#39;s\ncurrent contents, if any.",0,null],[11,"vertex_attrib_pointer","","Specify how an array of vertex data will be treated while rendering.\nMost uses of this function can be replaced by using a [`VertexBuffer`]\n(../../vertex_buffer/struct.VertexBuffer.html), which provides a nicer\ninterface for setting up vertex attributes.",0,null],[11,"draw_arrays_range","","Use the vertex data from the provided array buffer binding to render\nprimitives.",0,null],[11,"draw_n_elements_buffered","","Draw primitives specified by the provided element array buffer, treated\nas indices of the vertices from the provided array buffer.",0,null],[11,"draw_n_elements","","Draw primitives specified by the provided index array, treated as\nindices of the vertices from the provided array buffer.",0,null],[11,"draw_elements","","Draw primitives specified by the provided index array, treated as\nindices of the vertices from the provided array buffer.",0,null],[8,"ArrayBufferContext","","An OpenGL context that has a free `GL_ARRAY_BUFFER` binding.",null,null],[16,"Binder","","The type of binder this context contains.",1,null],[16,"Rest","","The OpenGL context that will be returned after binding the array buffer.",1,null],[10,"split_array_buffer","","Split this context into a binder and the remaining context.",1,null],[11,"bind_array_buffer","","Bind a buffer to this context&#39;s array buffer, returning\na new context and a binding.",1,null],[8,"ElementArrayBufferContext","","An OpenGL context that has a free `GL_ELEMENT_ARRAY_BUFFER` binding.",null,null],[16,"Binder","","The type of binder this context contains.",2,null],[16,"Rest","","The OpenGL context that will be returned after binding the element\narray buffer.",2,null],[10,"split_element_array_buffer","","Split this context into a binder and the remaining context.",2,null],[11,"bind_element_array_buffer","","Bind a buffer to this context&#39;s element array buffer, returning\na new context and a binding.",2,null],[8,"BufferContext","","An OpenGL context that has all free buffer bindings. This trait implies\nboth [`ArrayBufferContext`](trait.ArrayBufferContext.html) and\n[`ElementArrayBufferContext`](trait.ElementArrayBufferContext.html).",null,null],[8,"BufferBinding","","A buffer that has been bound to an OpenGL buffer binding point.",null,null],[10,"target","","Returns the OpenGL binding target that this buffer binding\nreferences.",3,null],[11,"split_array_buffer","glitter::context","",4,null],[11,"split_element_array_buffer","","",4,null],[11,"target","glitter::context::buffer_context","",5,null],[11,"target","","",6,null],[11,"current","","Get the current buffer-object binders.",7,{"inputs":[],"output":{"name":"bufferbinder"}}],[11,"swap_array","","Replace the array-buffer-related context with a new value, returning\nthe old value and a new buffer context.",7,null],[11,"swap_element_array","","Replace the element-array-buffer-related context with a new value,\nreturning the old value and a new buffer context.",7,null],[11,"current","","Get the current `GL_ARRAY_BUFFER` binder.",8,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a buffer to the `GL_ARRAY_BUFFER` target, returning a binding.",8,null],[11,"current","","Get the current `GL_ELEMENT_ARRAY_BUFFER` binder.",9,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a buffer to the `GL_ELEMENT_ARRAY_BUFFER` target, returning\na binding.",9,null],[0,"framebuffer_context","glitter::context","Contains all of the OpenGL state types related to framebuffer objects.",null,null],[3,"FramebufferBuilder","glitter::context::framebuffer_context","Provides a safe interface for building a framebuffer object that\nis checked to be framebuffer-complete. A `FramebufferBuilder` can\nbe created using the [`gl.build_framebuffer`]\n(trait.ContextFramebufferBuilderExt.html#method.build_framebuffer) method.",null,null],[3,"FramebufferBinding","","Represents a framebuffer that has been bound to the `GL_FRAMEBUFFER`\nbinding target.",null,null],[3,"FramebufferBinder","","The OpenGL state representing the `GL_FRAMEBUFFER` target.",null,null],[4,"FramebufferTarget","","All of the possible OpenGL targets for binding\nframebuffer objects.",null,null],[13,"Framebuffer","","The lone framebuffer target.",10,null],[4,"FramebufferAttachment","","The various attachment points of a framebuffer object.",null,null],[13,"ColorAttachment0","","The color buffer attachment point.",11,null],[13,"DepthAttachment","","The depth buffer attachment point.",11,null],[13,"StencilAttachment","","The stencil buffer attachment point.",11,null],[17,"FRAMEBUFFER","","The lone framebuffer target.",null,null],[17,"COLOR_ATTACHMENT0","","The color buffer attachment point.",null,null],[17,"DEPTH_ATTACHMENT","","The depth buffer attachment point.",null,null],[17,"STENCIL_ATTACHMENT","","The stencil buffer attachment point.",null,null],[8,"ContextFramebufferExt","","An extension trait that includes framebuffer-related OpenGL methods.",null,null],[11,"gen_framebuffer","","Create a new framebuffer object with no attachments.",12,null],[11,"check_framebuffer_status","","Returns the status of any framebuffer-completeness errors of a\ncurrently-bound framebuffer object. Returns `None` if the framebuffer\nis framebuffer-complete.",12,null],[11,"framebuffer_renderbuffer","","Attach a renderbuffer object to a framebuffer object&#39;s attachment\npoint.",12,null],[11,"framebuffer_texture_2d","","Attach a texture to a framebuffer object&#39;s attachment point.",12,null],[11,"clear","","Clear the currently-bound drawing buffers that are specified by\nthe `buffers` argument.",12,null],[8,"ContextFramebufferBuilderExt","","The extension trait for contexts that adds the `build_framebuffer` method.\nThis trait is only implemented for contexts that have a free framebuffer\nbinding.",null,null],[11,"build_framebuffer","","Create a new framebuffer builder, providing a safe interface\nfor constructing a framebuffer object. See the [`FramebufferBuilder`]\n(struct.FramebufferBuilder.html) docs for more details.",13,null],[8,"FramebufferContext","","An OpenGL context that has a free `GL_FRAMEBUFFER` binding.",null,null],[16,"Binder","","The type of binder this context contains.",14,null],[16,"Rest","","The OpenGL context that will be returned after binding a framebuffer.",14,null],[10,"split_framebuffer","","Split the context into a binder and the remaining context.",14,null],[11,"bind_framebuffer","","Bind a buffer to this context&#39;s framebuffer, returning a new context\nand a binding.",14,null],[11,"texture_2d","","Add a 2D texture (at the mipmap level specified by `level`) to the\nframebuffer&#39;s attachment point.",15,null],[11,"renderbuffer","","Add a renderbuffer to the framebuffer&#39;s attachment point.",15,null],[11,"try_unwrap","","Create and return a framebuffer with the specified options, or\nreturn an error.",15,null],[11,"unwrap","","Create and return a framebuffer with the specified options, or panic.",15,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",10,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",11,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",11,null],[11,"split_framebuffer","glitter::context","",4,null],[11,"current","glitter::context::framebuffer_context","Get the current `GL_FRAMEBUFFER` binder.",16,{"inputs":[],"output":{"name":"self"}}],[11,"current_binding","","Get the current `GL_FRAMEBUFFER` binding.",16,null],[11,"bind","","Bind a framebuffer to the `GL_FRAMEBUFFER` target, returning a binding.",16,null],[0,"program_context","glitter::context","Contains all of the OpenGL state types related to shader programs.",null,null],[3,"ProgramBuilder","glitter::context::program_context","Provides a safe interface for creating program objects. A\n`ProgramBuilder` can be created using the [`gl.build_program`]\n(trait.ContextProgramBuilderExt.html#method.build_program) method.",null,null],[3,"ProgramBinding","","Represents a program that has been bound to the context.",null,null],[3,"ProgramBinder","","The OpenGL state representing the active program target.",null,null],[3,"UnknownProgramAttrib","","An error that represents a program attribute that could not be found.",null,null],[3,"UnknownProgramUniform","","An error that represents a program uniform that could not be found.",null,null],[8,"ContextProgramBuilderExt","","The extension trait that adds the `build_program` method.",null,null],[11,"build_program","","Create a new program builder, providing a safe interface\nfor constructing a program object. See the [`ProgramBuilder`]\n(struct.ProgramBuilder.html) docs for more details.",17,null],[8,"ContextProgramExt","","An extension trait that includes program-related OpenGL methods.",null,null],[11,"create_program","","Create a new program object that has no shaders attached, or return\nan error if a shader object could not be created.",18,null],[11,"attach_shader","","Attach a shader to a program object.",18,null],[11,"link_program","","Link the program object, so that it can be used for rendering. Returns\nan error if the program could not be linked.",18,null],[11,"get_program_info_log","","Return the information log for the program object, if any is\navailable.",18,null],[11,"get_attrib_location","","Retrieve a program attribute&#39;s index by name, or return an error\nif the attribute was not found in the program.",18,null],[11,"get_uniform_location","","Retrieve a program uniform&#39;s index by name, or return an error\nif the uniform was not found within the program.",18,null],[11,"set_uniform","","Set the value of a uniform variable within the provided program\nobject binding.",18,null],[8,"ProgramContext","","An OpenGL context that has a free program binding.",null,null],[16,"Binder","","The type of binder this context contains.",19,null],[16,"Rest","","The OpenGL context that will be returned after binding a program.",19,null],[10,"split_program","","Split the context into a binder and the remaining context.",19,null],[11,"use_program","","Bind a program to this context&#39;s program, returning a new\ncontext and a binding.",19,null],[11,"new","","Create a new program builder.",20,null],[11,"try_unwrap","","Create and link the program object with the provided shaders, or\nreturn an error.",20,null],[11,"unwrap","","Create and link the program object with the provided shaders,\nor panic.",20,null],[11,"split_program","glitter::context","",4,null],[11,"current","glitter::context::program_context","Get the current program binder.",21,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a program to the context, returning a binding.",21,null],[11,"fmt","","",22,null],[11,"fmt","","",22,null],[11,"description","","",22,null],[11,"fmt","","",23,null],[11,"fmt","","",23,null],[11,"description","","",23,null],[0,"renderbuffer_context","glitter::context","Contains all of the OpenGL state types related to renderbuffers.",null,null],[3,"RenderbufferBuilder","glitter::context::renderbuffer_context","Provides a safe wrapper for creating renderbuffer objects. A\n`RenderbufferBuilder` can be created using the [`gl.build_renderbuffer`]\n(trait.ContextRenderbufferBuilderExt.html#method.build_renderbuffer)\nmethod.",null,null],[3,"RenderbufferBinding","","Represents a renderbuffer that has been bound to the `GL_RENDERBUFFER`\nbinding target.",null,null],[3,"RenderbufferBinder","","The OpenGL state representing the `GL_RENDERBUFFER` target.",null,null],[8,"ContextRenderbufferBuilderExt","","The extension trait for contexts that adds the `build_renderbuffer` method.\nThis trait is only implemented for contexts with a free renderbuffer\nbinding.",null,null],[11,"build_renderbuffer","","Create a new renderbuffer builder, providing a safe interface\nfor constructing a renderbuffer object. See the [`RenderbufferBuilder`]\n(struct.RenderbufferBuilder.html) docs for more details.",24,null],[8,"ContextRenderbufferExt","","An extension trait that includes renderbuffer-related OpenGL methods.",null,null],[11,"gen_renderbuffer","","Create a new renderbuffer object with no storage allocated.",25,null],[11,"storage","","Initialize a renderbuffer object&#39;s storage.",25,null],[8,"RenderbufferContext","","An OpenGL context that has a free `GL_RENDERBUFFER` binding.",null,null],[16,"Binder","","The type of binder this context contains.",26,null],[16,"Rest","","The OpenGL context that will be returned after binding a renderbuffer.",26,null],[10,"split_renderbuffer","","Split the context into a binder and the remaining context.",26,null],[11,"bind_renderbuffer","","Bind a renderbuffer to this context&#39;s renderbuffer,\nreturning a new context and a binding.",26,null],[11,"storage","","Set the storage parameters for the renderbuffer.",27,null],[11,"try_unwrap","","Create and return a renderbuffer with the provided storage options,\nor return an error.",27,null],[11,"unwrap","","Create a renderbuffer with the provided storage options, or panic.",27,null],[11,"split_renderbuffer","glitter::context","",4,null],[11,"current","glitter::context::renderbuffer_context","Get the current `GL_RENDERBUFFER` binder.",28,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a renderbuffer to the `GL_RENDERBUFFER` target, returning\na binding.",28,null],[0,"texture_context","glitter::context","Contains all of the OpenGL state types related to texture bindings.",null,null],[3,"Texture2dBuilder","glitter::context::texture_context","Provide a safe interface for building a 2D texture\nobject that is checked to be complete. A `Texture2dBuilder`\ncan be created using the [`gl.build_texture_2d`]\n(trait.ContextTextureBuilderExt.html#method.build_texture_2d)\nmethod.",null,null],[3,"Texture2dBinding","","Represents a texture that has been bound to the `GL_TEXTURE_2D` binding\ntarget of a texture unit.",null,null],[3,"TextureCubeMapBinding","","Represents a texture that has been bound to the `GL_TEXTURE_CUBE_MAP`\nbinding target of a texture unit.",null,null],[3,"Texture2dBinder","","The OpenGL texture unit state that represents the `GL_TEXTURE_2D`\ntarget.",null,null],[3,"TextureCubeMapBinder","","The OpenGL texture unit state that represents the `GL_TEXTURE_CUBE_MAP`\ntarget.",null,null],[8,"ContextTextureBuilderExt","","The extension trait for contexts that adds the `build_texture_2d` method.",null,null],[11,"build_texture_2d","","Create a new 2D texture builder, providing a safe interface\nfor constructing a 2D texture object. See the [`Texture2dBuilder`]\n(struct.Texture2dBuilder.html) docs for more details.",29,null],[8,"ContextTextureExt","","An extension trait that includes texture-related OpenGL methods.",null,null],[11,"gen_texture","","Create a new texture with no storage or image data.",30,null],[11,"set_min_filter","","Set a texture&#39;s minifying filter.",30,null],[11,"set_mag_filter","","Set a texture&#39;s magnifying filter.",30,null],[11,"set_wrap_s","","Set a texture&#39;s wrap mode for the s-coordinate.",30,null],[11,"set_wrap_t","","Set a texture&#39;s wrap mode for the t-coordinate.",30,null],[11,"generate_mipmap","","Generate a set of mipmaps for a texture object.",30,null],[11,"tex_image_2d","","Upload 2D image data to a texture object&#39;s image target.",30,null],[11,"tex_image_2d_empty","","Set a texture object&#39;s image target to an empty image\nwith the specified parameters.",30,null],[8,"TextureBinding","","Represents a texture that has been bound to a texture unit.",null,null],[16,"TextureType","","The type of texture that this binding represents.",31,null],[10,"target","","The OpenGL texture target of this binding.",31,null],[11,"image_2d","","Set the 2D image data to fill the texture with.",32,null],[11,"empty","","Set the parameters for creating an empty texture.",32,null],[11,"generate_mipmap","","Automatically generate mipmaps for the texture.",32,null],[11,"min_filter","","Set the texture&#39;s minifying filter.",32,null],[11,"mag_filter","","Set the texture&#39;s magnifying filter.",32,null],[11,"wrap_s","","Set the texture&#39;s wrap mode for the s-coordinate.",32,null],[11,"wrap_t","","Set the texture&#39;s wrap mode for the t-coordinate.",32,null],[11,"try_unwrap","","Create and return a texture with the specified options,\nor return an error.",32,null],[11,"unwrap","","Create a texture with the specified options, or panic.",32,null],[11,"target","","",33,null],[11,"target","","",34,null],[11,"current","","Get the current `GL_TEXTURE_2D` binder.",35,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a texture to the `GL_TEXTURE_2D` target,\nreturning a binding.",35,null],[11,"current","","Get the current `GL_TEXTURE_CUBE_MAP` binder.",36,{"inputs":[],"output":{"name":"self"}}],[11,"bind","","Bind a texture to the `GL_TEXTURE_CUBE_MAP` target,\nreturning a binding.",36,null],[0,"texture_units","glitter::context","Contains all of the OpenGL state types related texture units.",null,null],[3,"TextureUnit0","glitter::context::texture_units","The 0th texture unit.",null,null],[3,"TextureUnit1","","The 1st texture unit.",null,null],[3,"TextureUnit2","","The 2nd texture unit.",null,null],[3,"TextureUnit3","","The 3rd texture unit.",null,null],[3,"TextureUnit4","","The 4th texture unit.",null,null],[3,"TextureUnit5","","The 5th texture unit.",null,null],[3,"TextureUnit6","","The 6th texture unit.",null,null],[3,"TextureUnit7","","The 7th texture unit.",null,null],[3,"TextureUnitsOf","","This type holds all of the OpenGL texture units. Each type parameter\nis the current type of a texture unit. See the [`ContextOf`]\n(../struct.ContextOf.html) docs for more details.",null,null],[12,"0","","",37,null],[12,"1","","",37,null],[12,"2","","",37,null],[12,"3","","",37,null],[12,"4","","",37,null],[12,"5","","",37,null],[12,"6","","",37,null],[12,"7","","",37,null],[3,"TextureUnitBindingOf","","A texture unit that has been made active, and can have textures\nbound to it.",null,null],[3,"TextureSampler","","A newtype wrapper representing a texture sampler, which can be\nused to set a uniform variable, using [`gl.set_uniform`]\n(../program_context/trait.ContextProgramExt.html#method.set_uniform).",null,null],[6,"TextureUnits","","A part of the OpenGL context that has all free texture units.",null,null],[6,"TextureUnitBinding","","A fresh texture unit binding, that has all free texture bindings.",null,null],[8,"TextureUnit","","A trait that represents a &#39;texture unit&#39;, which is a piece of OpenGL state\nthat contains its own independent texture bindings.",null,null],[10,"idx","","Get the index of the texture unit.",38,null],[11,"active","","Make the current texture unit active, returning a binding.",38,null],[8,"TextureUnit0Context","","An OpenGL context with the 0th texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",39,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",39,null],[10,"split_tex_unit_0","","Split the 0th texture unit from the context, returning the unit\nand the remaining context.",39,null],[11,"active_texture_0","","Make the 0th texture unit active, returning a binding and the\nremaining context",39,null],[8,"TextureUnit1Context","","An OpenGL context with the 1st texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",40,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",40,null],[10,"split_tex_unit_1","","Split the 1st texture unit from the context, returning the unit\nand the remaining context.",40,null],[11,"active_texture_1","","Make the 1st texture unit active, returning a binding and the\nremaining context",40,null],[8,"TextureUnit2Context","","An OpenGL context with the 2nd texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",41,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",41,null],[10,"split_tex_unit_2","","Split the 2nd texture unit from the context, returning the unit\nand the remaining context.",41,null],[11,"active_texture_2","","Make the 2nd texture unit active, returning a binding and the\nremaining context",41,null],[8,"TextureUnit3Context","","An OpenGL context with the 3rd texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",42,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",42,null],[10,"split_tex_unit_3","","Split the 3rd texture unit from the context, returning the unit\nand the remaining context.",42,null],[11,"active_texture_3","","Make the 3rd texture unit active, returning a binding and the\nremaining context",42,null],[8,"TextureUnit4Context","","An OpenGL context with the 4th texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",43,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",43,null],[10,"split_tex_unit_4","","Split the 4th texture unit from the context, returning the unit\nand the remaining context.",43,null],[11,"active_texture_4","","Make the 4th texture unit active, returning a binding and the\nremaining context",43,null],[8,"TextureUnit5Context","","An OpenGL context with the 5th texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",44,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",44,null],[10,"split_tex_unit_5","","Split the 5th texture unit from the context, returning the unit\nand the remaining context.",44,null],[11,"active_texture_5","","Make the 5th texture unit active, returning a binding and the\nremaining context",44,null],[8,"TextureUnit6Context","","An OpenGL context with the 6th texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",45,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",45,null],[10,"split_tex_unit_6","","Split the 6th texture unit from the context, returning the unit\nand the remaining context.",45,null],[11,"active_texture_6","","Make the 6th texture unit active, returning a binding and the\nremaining context",45,null],[8,"TextureUnit7Context","","An OpenGL context with the 7th texture unit free.",null,null],[16,"Unit","","The type of unit this context contains.",46,null],[16,"Rest","","The OpenGL context that will be returned after making the\ntexture unit active.",46,null],[10,"split_tex_unit_7","","Split the 7th texture unit from the context, returning the unit\nand the remaining context.",46,null],[11,"active_texture_7","","Make the 7th texture unit active, returning a binding and the\nremaining context",46,null],[8,"ATextureUnitBinding","","A marker trait for types that represent an active texture unit binding.",null,null],[8,"TextureUnitBinding2d","","A texture unit binding that has a free `GL_TEXTURE_2D` binding.",null,null],[16,"Binder","","The type of binder this texture unit contains.",47,null],[16,"Rest","","The texture unit that will be returned after binding the texture.",47,null],[10,"split_texture_2d","","Split the texture unit into a binder and the remaining texture unit.",47,null],[11,"bind_texture_2d","","Bind a 2D texture to this texture unit, returning a binding\nand the remaining texture unit.",47,null],[8,"TextureUnitBindingCubeMap","","A texture unit binding that has a free `GL_TEXTURE_CUBE_MAP` binding.",null,null],[16,"Binder","","The type of binder this texture unit contains.",48,null],[16,"Rest","","The texture unit that will be returned after binding the texture.",48,null],[10,"split_texture_cube_map","","Split the texture unit into a binder and the remaining texture unit.",48,null],[11,"bind_texture_cube_map","","Bind a cubemap texture to this texture unit, returning a binding\nand the remaining texture unit.",48,null],[11,"idx","","",49,null],[11,"idx","","",50,null],[11,"idx","","",51,null],[11,"idx","","",52,null],[11,"idx","","",53,null],[11,"idx","","",54,null],[11,"idx","","",55,null],[11,"idx","","",56,null],[11,"current","","Get the current texture units.",37,{"inputs":[],"output":{"name":"textureunits"}}],[11,"swap_0","","Replace the 0th texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_1","","Replace the 1st texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_2","","Replace the 2nd texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_3","","Replace the 3rd texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_4","","Replace the 4th texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_5","","Replace the 5th texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_6","","Replace the 6th texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"swap_7","","Replace the 7th texture unit context with a new value, returning the\nold value and a new set of texture units",37,null],[11,"active_nth","","Make the `idx`th texture unit the active one, returning a new binding.",37,null],[11,"split_tex_unit_0","glitter::context","",4,null],[11,"split_tex_unit_1","","",4,null],[11,"split_tex_unit_2","","",4,null],[11,"split_tex_unit_3","","",4,null],[11,"split_tex_unit_4","","",4,null],[11,"split_tex_unit_5","","",4,null],[11,"split_tex_unit_6","","",4,null],[11,"split_tex_unit_7","","",4,null],[11,"gl_idx","glitter::context::texture_units","Get the index of the texture unit.",57,null],[11,"sampler","","Get the current texture unit as a [`TextureSampler`]\n(struct.TextureSampler.html), which can be used to set\na uniform variable.",57,null],[11,"split_texture_2d","","",57,null],[11,"split_texture_cube_map","","",57,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"uniform_datum_type","","",58,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[0,"ext","glitter::context","Contains all of the [`ContextOf`](../struct.ContextOf.html) extension\ntraits that implement core OpenGL functionality.",null,null],[6,"Context","","A &quot;fresh&quot; OpenGL context: one that essentially has no active bindings.\nSee the [`ContextOf`](struct.ContextOf.html) docs for more details.",null,null],[8,"BaseContext","","A marker trait for types that represent an active OpenGL context.",null,null],[8,"ContextExt","","An extension trait that contains some of the core OpenGL methods that\nmaintain state, such as the current clear color or whether depth testing\nis enabled.",null,null],[11,"clear_color","","Set the clear value when clearing a color buffer with\n[`gl.clear(glitter::COLOR_BUFFER_BIT)`]\n(framebuffer_context/trait.ContextFramebufferExt.html#method.clear).",59,null],[11,"enable","","Enable an OpenGL capability.",59,null],[11,"disable","","Disable an OpenGL capability.",59,null],[11,"enable_vertex_attrib_array","","Enable the vertex attribute array to be used while drawing with\n[`gl.draw_arrays_range`](buffer_context/trait.ContextBufferExt.html#method.draw_arrays_range),\n[`gl.draw_elements`](buffer_context/trait.ContextBufferExt.html#method.draw_elements),\n[`gl.draw_n_elements`](buffer_context/trait.ContextBufferExt.html#method.draw_n_elements),\n[`gl.draw_n_elements_buffered`](buffer_context/trait.ContextBufferExt.html#method.draw_n_elements_buffered).",59,null],[11,"viewport","","Set the OpenGL viewport dimensions, which maps from device coordinates\nto window coordinates.",59,null],[8,"AContext","","The &#39;core&#39; OpenGL context trait. This trait provides access to any OpenGL\nfunctionality that don&#39;t deal with binding. This trait is implemented for\n`ContextOf&lt;_, _, _, _, _&gt;`, as well as for `&amp;mut ContextOf&lt;_, _, _, _, _&gt;`.",null,null],[11,"load_with","","Use a function to load OpenGL function pointers. This function must\nbe called before calling [`ContextOf::current_context`]\n(struct.ContextOf.html#method.current_context).",4,{"inputs":[{"name":"l"}],"output":null}],[11,"current_context","","Get the current OpenGL context.",4,{"inputs":[],"output":{"name":"context"}}],[11,"get_error","","Get an OpenGL error that was generated since the last call to\n`ContextOf::get_error()`, or `None` is none occurred.",4,{"inputs":[],"output":{"name":"option"}}],[11,"borrowed","","Return a new `ContextOf`, where the type parameters of the new context\nare borrows of the current context. This function shouldn&#39;t be\nnecessary in most circumstances, and will likely be removed from\nthe public API in a future release.",4,null],[11,"borrowed_mut","","Return a new `ContextOf`, where the type parameters of the new context\nare mutable borrows of the current context. This function shouldn&#39;t\nbe necessary in most circumstances, and will likely be removed from\nthe public API in a future release.",4,null],[11,"swap_buffers","","Replace the current context&#39;s internal `buffers` field (of type `B`)\nwith a new value, returning the old value and a new context. This\nfunction will likely be removed from the public API in the future.",4,null],[11,"swap_framebuffer","","Replace the current context&#39;s internal `framebuffer` field (of type `F`)\nwith a new value, returning the old value and a new context. This\nfunction will likely be removed from the public API in the future.",4,null],[11,"swap_program","","Replace the current context&#39;s internal `program` field (of type `P`)\nwith a new value, returning the old value and a new context. This\nfunction will likely be removed from the public API in the future.",4,null],[11,"swap_renderbuffer","","Replace the current context&#39;s internal `renderbuffer` field (of\ntype `B`) with a new value, returning a new context and the old value.\nThis function will likely be removed from the public API in the future.",4,null],[11,"swap_tex_units","","Replace the current context&#39;s internal `tex_units` field (of type `T`)\nwith a new value, returning the old value and a new context. This\nfunction will likely be removed from the public API in the future.",4,null],[0,"buffer","glitter","Exposes the OpenGL [`Buffer`](struct.Buffer.html) object, and related types.",null,null],[3,"Buffer","glitter::buffer","An OpenGL buffer object.",null,null],[4,"BufferDataUsage","","Provides a hint to the OpenGL driver for how a buffer will be used.",null,null],[13,"StreamDraw","","Indicates that a buffer will be set once and drawn\nonly a few times.",60,null],[13,"StaticDraw","","Indicates that a buffer will be set once and drawn many times",60,null],[13,"DynamicDraw","","Indicates that a buffer will be set and modified repeatedly\nand drawn many times.",60,null],[4,"BufferBindingTarget","","All of the possible OpenGL targets for binding a buffer object.",null,null],[13,"ArrayBuffer","","The array buffer object binding.",61,null],[13,"ElementArrayBuffer","","The element array buffer object binding.",61,null],[17,"STREAM_DRAW","","Indicates that a buffer will be set once and drawn\nonly a few times.",null,null],[17,"STATIC_DRAW","","Indicates that a buffer will be set once and drawn many times",null,null],[17,"DYNAMIC_DRAW","","Indicates that a buffer will be set and modified repeatedly\nand drawn many times.",null,null],[17,"ARRAY_BUFFER","","The array buffer object binding.",null,null],[17,"ELEMENT_ARRAY_BUFFER","","The element array buffer object binding.",null,null],[11,"drop","","",62,null],[11,"from_raw","","",62,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",62,null],[11,"hash","","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",60,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",60,null],[11,"hash","","",61,null],[11,"eq","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",61,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",61,null],[0,"shader","glitter","Exposes the OpenGL [`Shader`](struct.Shader.html) object and related types.",null,null],[3,"Shader","glitter::shader","An OpenGL shader object.",null,null],[3,"ShaderBuilder","","A safe interface for creating a shader with a source, and returning an error\nor panicking if there is an error.",null,null],[4,"ShaderType","","The possible types of shader objects.",null,null],[13,"VertexShader","","A shader that is used for processing per-vertex data.",63,null],[13,"FragmentShader","","A shader that is used for processing per-fragment (per-pixel)\ndata.",63,null],[17,"VERTEX_SHADER","","A shader that is used for processing per-vertex data.",null,null],[17,"FRAGMENT_SHADER","","A shader that is used for processing per-fragment (per-pixel)\ndata.",null,null],[8,"ContextShaderBuilderExt","","An extension trait for [`ContextOf`](../context/struct.ContextOf.html) that\nadds functions to build shaders using the [`ShaderBuilder`]\n(struct.ShaderBuilder.html) interface.",null,null],[10,"build_shader","","Build a new shader with the provided shader type and shader source.",64,null],[11,"build_fragment_shader","","Build a new fragment shader with the provided shader source.",64,null],[11,"build_vertex_shader","","Build a new vertex shader with the provided shader source.",64,null],[8,"ContextShaderExt","","An extension trait that includes shader-related OpenGL methods.",null,null],[11,"create_shader","","Create a new, uninitialized shader.",65,null],[11,"shader_source","","Set or replace a shader object&#39;s source. The shader should be recompiled\nafter calling this function by using the [`gl.compile_shader`]\n(trait.ContextShaderExt.html#method.compile_shader) function",65,null],[11,"compile_shader","","Compile the shader&#39;s associated source.",65,null],[11,"get_shader_info_log","","Get the information log associated with a shader. This is used to\nget compilation errors, warnings, or other diagnostic information\nthat may have occurred while trying to compile a shader. Returns `None`\nif no such diagnostic information was generated.",65,null],[11,"drop","","",66,null],[11,"from_raw","","",66,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",66,null],[11,"try_unwrap","","Try to compile a shader with the provided options, or `Err` if\na new shader object could not be created or if there was an error\ncompiling the provided source.",67,null],[11,"unwrap","","Try to compile a shader with the provided options, panicking if\na new shader object could not be created or if there was an error\ncompiling the provided source.",67,null],[11,"hash","","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",63,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",63,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",63,null],[0,"program","glitter","Exposes the OpenGL [`Program`](struct.Program.html) object and related types.",null,null],[3,"Program","glitter::program","An OpenGL program object.",null,null],[3,"ProgramAttrib","","An OpenGL generic vertex attribute.",null,null],[12,"gl_index","","The index of the program attribute.",68,null],[3,"ProgramUniform","","An OpenGL program uniform.",null,null],[12,"gl_index","","The index of the the program uniform.",69,null],[11,"drop","","",70,null],[11,"from_raw","","",70,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",70,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[0,"framebuffer","glitter","Exposes the OpenGL [`Framebuffer`](struct.Framebuffer.html) object,\nand related types.",null,null],[3,"Framebuffer","glitter::framebuffer","An OpenGL framebuffer object.",null,null],[11,"drop","","",71,null],[11,"from_raw","","",71,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",71,null],[0,"renderbuffer","glitter","Exposes the OpenGL [`Renderbuffer`](struct.Renderbuffer.html) object,\nand related types.",null,null],[3,"Renderbuffer","glitter::renderbuffer","An OpenGL renderbuffer object.",null,null],[4,"RenderbufferTarget","","All of the possible OpenGL targets for binding renderbuffer objects.",null,null],[13,"Renderbuffer","","The lone renderbuffer target.",72,null],[17,"RENDERBUFFER","","The lone renderbuffer target.",null,null],[11,"drop","","",73,null],[11,"from_raw","","",73,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",73,null],[11,"hash","","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",72,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",72,null],[0,"texture","glitter","Exposes the OpenGL [`Texture`](struct.Texture.html) family of objects and\nrelated types.",null,null],[3,"Texture","glitter::texture","A type of OpenGL texture.",null,null],[3,"Tx2d","","The [`TextureType`](trait.TextureType.html) for 2-dimensional textures.",null,null],[3,"TxCubeMap","","The [`TextureType`](trait.TextureType.html) for cubemap textures.",null,null],[3,"VariantTexture2d","","This is a unit type that is used to be coerced into select enum variants.",null,null],[4,"Tx2dImageTarget","","The possible image targets for `GL_TEXTURE_2D` (only one variant,\nsince this *is* the 2D texture).",null,null],[13,"Texture2d","","The only possible target for a 2-dimensional texture.",74,null],[4,"TxCubeMapImageTarget","","The possible 2D image targets for a cubemap texture.",null,null],[13,"CubeMapPositiveX","","The positive-X image target face of a cubemap.",75,null],[13,"CubeMapNegativeX","","The negative-X image target face of a cubemap.",75,null],[13,"CubeMapPositiveY","","The positive-Y image target face of a cubemap.",75,null],[13,"CubeMapNegativeY","","The negative-Y image target face of a cubemap.",75,null],[13,"CubeMapPositiveZ","","The positive-Z image target face of a cubemap.",75,null],[13,"CubeMapNegativeZ","","The negative-Z image target face of a cubemap.",75,null],[4,"TextureBindingTarget","","Represents all of the possible types of OpenGL textures.",null,null],[13,"Texture2d","","A 2-dimensional texture, which can be thought of as a 2D grid of colors.",76,null],[13,"TextureCubeMap","","A cubemap texture, which is a texture made up of six 2-dimensional\nimages, each of which represent a face of a cube. This type of texture\nis especially useful for skyboxes.",76,null],[4,"TextureFilter","","Represents the different forms of texture filtering, which determines\nhow a texture will be sampled when drawn.",null,null],[13,"Nearest","","When texturing a pixel, return the texel that is nearest to the center\nof the pixel.",77,null],[13,"Linear","","When texturing a pixel, return a weighted average of the four texels\nnearest to center of the pixel.",77,null],[4,"TextureMipmapFilter","","Represents the different forms of texture filtering when using mipmaps.",null,null],[13,"Filter","","Ignore mipmap values, and texture a pixel using a standard\n[`TextureFilter`](enum.TextureFilter.html).",78,null],[13,"MipmapFilter","","Select the two mipmaps that are closest to the size of pixel\nbeing filled, and sample each one according to `criterion`.\nFinally, the result will be computed either by taking the\nweighted average of each texel, or by selecting the value\nfrom the closer texel, according to `mipmap`.",78,null],[12,"criterion","glitter::texture::TextureMipmapFilter","The method to use to select the texels from a mipmap.",78,null],[12,"mipmap","","The method to use to select the mipmaps.",78,null],[4,"TextureWrapMode","glitter::texture","The wrapping modes when drawing a texture.",null,null],[13,"ClampToEdge","","Wrap a texture by clamping it within the range `[1/2x, 1 - 1/2x]`,\nwhere `x` is the dimension of the texture being clamped.",79,null],[13,"MirroredRepeat","","Wrap a texture by repeating it front-to-back, then back-to-front,\nthen repeating.",79,null],[13,"Repeat","","Wrap a texture by repeating it over and over again.",79,null],[6,"Texture2d","","An OpenGL texture with 2-dimensional image data.",null,null],[6,"TextureCubeMap","","An OpenGL texture used to hold a cubemap texture, made up of 6\n2-dimensional images (one for each face of a cube).",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","The positive-X image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","The negative-X image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","The positive-Y image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","The negative-Y image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","The positive-Z image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","The negative-Z image target face of a cubemap.",null,null],[17,"TEXTURE_CUBE_MAP","","This constant is designed to be used in glitter wherever the constant\n`GL_TEXTURE_CUBE_MAP` is used in plain OpenGL code.",null,null],[17,"TEXTURE_2D","","This constant is designed to be used in glitter wherever the constant\n`GL_TEXTURE_2D` is used in plain OpenGL code.",null,null],[17,"NEAREST","","When texturing a pixel, select the texel that is closest\nto the center of the pixel.",null,null],[17,"LINEAR","","When texturing a pixel, select the four texels that\nare closest to the center of the pixel, and compute the\nresult by taking a weighted average of each texel.",null,null],[17,"NEAREST_MIPMAP_NEAREST","","When texturing a pixel, select the mipmap that is nearest\nin size to the pixel, and select the texel that is\nclosest to the center of the pixel.",null,null],[17,"LINEAR_MIPMAP_NEAREST","","When texturing a pixel, select the mipmap that is nearest\nin size to the pixel, select the four texels that are closest\nto the center of the pixel, and compute the result by taking\nthe weighted average of each texel.",null,null],[17,"NEAREST_MIPMAP_LINEAR","","When texturing a pixel, select the two mipmaps that are nearest\nin size to the pixel, select the texel in each that is closest\nto the center of the pixel, and compute the result by taking\nthe weighted average of each texel.",null,null],[17,"LINEAR_MIPMAP_LINEAR","","When texturing a pixel, select the two mipmaps that are nearest\nin size to the pixel. For each, select the four texels that are\nclosest to the center of the pixel, and compute the weighted average.\nFinally, take the resulting two weighted averages of the texels,\nand take the weighted average of both based on the mipmaps.",null,null],[17,"CLAMP_TO_EDGE","","Wrap a texture by clamping it within the range `[1/2x, 1 - 1/2x]`,\nwhere `x` is the dimension of the texture being clamped.",null,null],[17,"MIRRORED_REPEAT","","Wrap a texture by repeating it front-to-back, then back-to-front,\nthen repeating.",null,null],[17,"REPEAT","","Wrap a texture by repeating it over and over again.",null,null],[8,"ImageTargetType","","A trait implemented for types that are used to represent all of the\npossible 2D images that make up a specific implementation of\n[`TextureType`](trait.TextureType.html). For more details, read the\n[`TextureType`](trait.TextureType.html) documentation.",null,null],[10,"gl_enum","","Get the raw OpenGL enum value for an image target.",80,null],[8,"TextureType","","A trait implemented for a type that represent a type of texture (such\nas 2D textures or cube map textures).  For example, [`TxCubeMap`]\n(struct.TxCubeMap.html) is a type that implements `TextureType`, and\nit represents cube map textures.",null,null],[16,"ImageTargetType","","The type that is used to indicate all of the possible target 2D images\nfor this type of texture. The associated `ImageTargetType` in the impl\nfor [`TxCubeMap`](struct.TxCubeMap.html), for example, is\n[`TxCubeMapImageTarget`] (enum.TxCubeMapImageTarget.html), which is an\nenum with six variants, one for each of the six 2-dimensional images\nthat make up a cube map.",81,null],[10,"target","","The actual variant that represents this type of texture. The\n`target()` method impl for [`TxCubeMap`](struct.TxCubeMap.html), for\nexample, returns `TextureBindingTarget::CubeMap`.",81,{"inputs":[],"output":{"name":"texturebindingtarget"}}],[11,"drop","","",82,null],[11,"from_raw","","",82,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"id","","",82,null],[11,"eq","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"gl_enum","","",74,null],[11,"target","","",83,{"inputs":[],"output":{"name":"texturebindingtarget"}}],[11,"hash","","",75,null],[11,"eq","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",75,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",75,null],[11,"gl_enum","","",75,null],[11,"target","","",84,{"inputs":[],"output":{"name":"texturebindingtarget"}}],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"gl_enum","","Convert a `TextureBindingTarget` into a raw OpenGL enum value.",76,null],[11,"from","","",76,{"inputs":[{"name":"varianttexture2d"}],"output":{"name":"texturebindingtarget"}}],[11,"from","","",74,{"inputs":[{"name":"varianttexture2d"}],"output":{"name":"tx2dimagetarget"}}],[11,"gl_enum","","",85,null],[11,"eq","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",77,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",78,null],[11,"gl_enum","","Convert a `TextureFilter` into a raw OpenGL enum value",77,null],[11,"gl_enum","","Convert a `TextureMipmapFilter` into a raw OpenGL enum value",78,null],[11,"from","","",78,{"inputs":[{"name":"texturefilter"}],"output":{"name":"texturemipmapfilter"}}],[11,"hash","","",79,null],[11,"eq","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",79,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",79,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",79,null],[0,"image_data","glitter","Contains types related to 2D image data.",null,null],[3,"Pixel","glitter::image_data","A single OpenGL color value, with `u8` components laid out\nas a C struct in RGBA order. This type is the simplest implementation\nof [`Image2d`](trait.Image2d.html), which allows it to be uploaded\nto a texture.",null,null],[12,"r","","The red component.",86,null],[12,"g","","The green component.",86,null],[12,"b","","The blue component.",86,null],[12,"a","","The alpha component.",86,null],[3,"Pixels","","A (heap-allocated) 2D image composed of a list of pixels.",null,null],[3,"ImageFormat","","A type that contains the texel type and format that make up a 2D image.",null,null],[12,"texel_type","","The texel type of the image.",87,null],[12,"texel_format","","The texel format of the image.",87,null],[4,"TexelType","","The data types for a texel.",null,null],[13,"UnsignedByte","","Each texel is 4 * 8 bits.",88,null],[13,"UnsignedShort565","","Each texel is 16 bits, with 5-bit/6-bit/5-bit components.",88,null],[13,"UnsignedShort4444","","Each texel is 16 bits, with 4, 4-bit components.",88,null],[13,"UnsignedShort5551","","Each texel is 16 bits, with 5-bit/5-bit/5-bit/1-bit components.",88,null],[4,"TexelFormat","","The different texel formats.",null,null],[13,"Alpha","","A texel contains only an alpha component.",89,null],[13,"RGB","","A texel contains red, green, and blue components.",89,null],[13,"RGBA","","A texel contains red, green, blue, and alpha components.",89,null],[4,"RenderbufferFormat","","The various image formats of a renderbuffer.",null,null],[13,"RGBA4","","The red, green, blue, and alpha channels are all stored with 4 bits.",90,null],[13,"RGB565","","The red, green, and blue channels are stored with 5 bits, 6 bits,\nand 5 bits, respectively.",90,null],[13,"RGB5A1","","The red, green, and blue channels are stored with 5 bits, and the\nalpha channel is stored with 1 bit.",90,null],[13,"DepthComponent16","","The renderbuffer stores a 16-bit depth component.",90,null],[13,"StencilIndex8","","The renderbuffer stores an 8-bit stencil component.",90,null],[17,"UNSIGNED_BYTE_TEXEL","","Each texel is 4 * 8 bits.",null,null],[17,"UNSIGNED_SHORT_5_6_5","","Each texel is 16 bits, with 5-bit/6-bit/5-bit components.",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","Each texel is 16 bits, with 4, 4-bit components.",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","Each texel is 16 bits, with 5-bit/5-bit/5-bit/1-bit components.",null,null],[17,"ALPHA","","A texel contains only an alpha component.",null,null],[17,"RGB","","A texel contains red, green, and blue components.",null,null],[17,"RGBA","","A texel contains red, green, blue, and alpha components.",null,null],[17,"RGBA4","","The red, green, blue, and alpha channels are all stored with 4 bits.",null,null],[17,"RGB565","","The red, green, and blue channels are stored with 5 bits, 6 bits,\nand 5 bits, respectively.",null,null],[17,"RGB5_A1","","The red, green, and blue channels are stored with 5 bits, and the\nalpha channel is stored with 1 bit.",null,null],[17,"DEPTH_COMPONENT16","","The renderbuffer stores a 16-bit depth component.",null,null],[17,"STENCIL_INDEX8","","The renderbuffer stores an 8-bit stencil component.",null,null],[8,"Image2d","","A trait for types that that contain 2D image data, which can\nbe uploaded to a texture using a [`Texture2dBuilder`]\n(../context/texture_context/struct.Texture2dBuilder)\nor using the [`gl.image_2d`]\n(../context/texture_context/trait.ContextTextureExt.html#method.image_2d)\nmethod.",null,null],[10,"width","","Get the width of the image, in texels.",91,null],[10,"height","","Get the height of the image, in texels.",91,null],[10,"format","","Get the format of the image data that is returned by the\n[`texel_bytes`](trait.Image2d.html#tymethod.texel_bytes) method.",91,null],[10,"texel_bytes","","Get the raw texel data of the image data, as a `u8` slice.",91,null],[11,"default","","",86,{"inputs":[],"output":{"name":"pixel"}}],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"r_g_b_a","","Create an RGBA color, provided each color component.",86,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"r_g_b","","Create an RGBA color, provided the RGB components and using\n`0xFF` as the A value.",86,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"rgb","","Create an RGBA color, provided the RGB components as a packed\n`u32` value. The `u32` value will be read as `0x00RRGGBB`.",86,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"argb","","Create an RGBA color value, provided the components as a packed\n`u32` value. The `u32` value will be read as `0xAARRGGBB`.",86,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"rgba","","Create an RGBA color, provided the RGB components as a packed\n`u32` value. The `u32` value will be read as `0xRRGGBBAA`.",86,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"rgb_a","","Create an RGBA color, provided the RGB components as a packed\n`u32` value, and a separate A component. The `u32` value\nwill be read as `0x00RRGGBB`.",86,{"inputs":[{"name":"u32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"clone","","",92,null],[11,"new","","Create a new image with the desired width and height. Pixels\nare initialized with [`Pixel::default()`]\n(https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default).",92,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",92,null],[11,"index_mut","","",92,null],[11,"width","","",92,null],[11,"height","","",92,null],[11,"format","","",92,null],[11,"texel_bytes","","",92,null],[11,"hash","","",88,null],[11,"eq","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",88,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",88,null],[11,"hash","","",89,null],[11,"eq","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",89,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",89,null],[11,"hash","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",90,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",90,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"rgba8","","Returns the RGBA image format with 8 bits per component.",87,{"inputs":[],"output":{"name":"self"}}],[0,"vertex_data","glitter","Contains types related to vertex data, which are used for [`VertexBuffers`]\n(../vertex_buffer/struct.VertexBuffer.html).",null,null],[3,"VertexAttribute","glitter::vertex_data","Specifies the type, name, and memory layout of a vertex attribute.\nGenerally, a &quot;vertex attribute&quot; corresponds to a field in a [`VertexData`]\n(trait.VertexData.html) struct.",null,null],[12,"ty","","The type of the vertex attribute. This also specifies the number\nof bytes that make up a vertex attribute.",93,null],[12,"name","","The name of the vertex attribute. This value is used\nas the `$field_name` when binding vertex attribute\npointers with the [`attrib_pointers!`](macro.attrib_pointers!.html)\nmacro.",93,null],[12,"offset","","The number of bytes to &quot;move&quot; from the start of the vertex data\nto reach this vertex attribute.",93,null],[12,"stride","","The number of bytes between consecutive vertex attributes. 0 indicates\nthat the vertex data is tightly packed.",93,null],[3,"VertexAttributeType","","Used to specify type of a vertex attribute. The size of the vertex\nattribute is `size_of(data) * components`.",null,null],[12,"data","","The type of data that makes up this vertex attribute.",94,null],[12,"components","","The number of `data` components that make up this vertex attribute.",94,null],[12,"normalize","","If the `data` type is fixed-point data, indicates if the data\nshould be normalized when being accessed. `true` indicates\nthat the vertex attribute **should** be normalized when being\naccessed.",94,null],[8,"VertexData","","A type that has vertex data.",null,null],[10,"visit_attributes","","Call the given function with each attribute that this\nvertex data is composed of.",95,{"inputs":[{"name":"f"}],"output":null}],[8,"VertexDatum","","A single value that can be treated as a part of a vertex. Implementors\nshould map to a GLSL primitive that can be used as a vertex attribute.\nFor example, `[f32; 2]` corresponds to `vec2` in memory layout\nand structure.",null,null],[10,"attrib_type","","Return the data type this datum corresponds to.",96,{"inputs":[],"output":{"name":"vertexattributetype"}}],[8,"VertexPrimitive","","A single, basic value that can be composed to make a [`VertexDatum`]\n(trait.VertexDatum.html). Scalar values are an example of a\n`VertexPrimitive`.",null,null],[10,"data_type","","Return the data type this primitive corresponds to.",97,{"inputs":[],"output":{"name":"datatype"}}],[8,"VertexBytes","","Indicates that a type can be coerced to a `u8` slice that can\nthen be treated as a stream of vertex data.",null,null],[10,"vertex_bytes","","Create a byte slice of vertex data from `self`.",98,null],[11,"clone","","",93,null],[11,"clone","","",94,null],[0,"vertex_buffer","glitter","Contains a higher-level abstraction for creating vertex and index\nbuffer.",null,null],[3,"AttribError","glitter::vertex_buffer","An error generated when trying to iterate over the lists of attributes\nin an [`AttribBinder`](struct.AttribBinder.html).",null,null],[3,"AttribBinder","","A type used to perform operations on a list of program attributes. An\ninstance of an `AttribBinder` can be created with the [`attrib_pointers!`]\n(../macro.attrib_pointers!.html) macro or with the [`new`]\n(struct.AttribBinder.html#method.new) method.",null,null],[3,"VertexBuffer","","A buffer that contains vertex data. In addition to storing a buffer,\na `VertexBuffer` stores an [`AttribBinder`](struct.AttribBinder.html)\nand a count of the amount of `VertexData` that has been buffered.",null,null],[3,"VertexBufferBinding","","Represents a [`VertexBuffer`](struct.VertexBuffer.html) that has\nbeen bound to a context.",null,null],[3,"IndexBuffer","","A buffer that contains index data. In addition to storing a buffer, an\n`IndexBuffer` store a count of the amount of `IndexData` that has been\nbuffered.",null,null],[3,"IndexBufferBinding","","Represents an [`IndexBuffer`](struct.IndexBuffer.html) that has been\nbound to a context.",null,null],[4,"AttribAddError","","An error generated when trying add an attribute to an [`AttribBinder`]\n(struct.AttribBinder.html) using the [`AttribBinder::add`]\n(struct.AttribBinder.html#method.add) method.",null,null],[13,"DuplicateAttrib","","An attribute was added that already exists in the [`AttribBinder`]\n(struct.AttribBinder.html).",99,null],[4,"VertexBindError","","An error generated when binding vertex attributes.",null,null],[13,"BindingError","","An `AttribError` that was generated",100,null],[13,"NoAttributeBindings","","No attribute bindings were provided.",100,null],[8,"ContextVertexBufferExt","","An extension trait that adds vertex buffer and index buffer-related methods\nto OpenGL contexts.",null,null],[11,"new_vertex_buffer","","Create a new, empty vertex buffer.",101,null],[11,"buffer_vertices","","Send data to a vertex buffer. Note that this will replace the buffer&#39;s\ncurrent contents, if any.",101,null],[11,"buffer_indices","","Send data to an index buffer. Note that this will replace the buffer&#39;s\ncurrent contents, if any.",101,null],[11,"draw_arrays_range_vbo","","Use the data from the provided vertex buffer binding to render\nprimitives.",101,null],[11,"draw_arrays_vbo","","Use the data from the provided vertex buffer binding to render\nprimitives. This function will use the full range of vertices\nthat have been buffered.",101,null],[11,"draw_n_elements_buffered_vbo","","Draw primitives using the provided index buffer as\nthe indices into the provided vertex buffer.",101,null],[11,"draw_elements_buffered_vbo","","Draw primitives using the provided index buffer as\nthe indices into the provided vertex buffer. All buffered\nindices will be used.",101,null],[11,"draw_n_elements_vbo","","Draw primitives specified by the provided index array,\ntreated as indices into the provided vertex buffer.",101,null],[11,"draw_elements_vbo","","Draw primitives specified by the provided index array,\ntreated as indices into the provided vertex buffer.",101,null],[8,"VertexBufferContext","","An OpenGL context that can have a vertex buffer bound.",null,null],[11,"bind_vertex_buffer","","Bind a vertex buffer to this context, returning a binding\nand a new context.",102,null],[8,"IndexBufferContext","","An OpenGL context that can have an index buffer bound.",null,null],[11,"bind_index_buffer","","Bind an index buffer to this context, returning a binding\nand the remaining context.",103,null],[11,"fmt","","",99,null],[11,"fmt","","",104,null],[11,"new","","Create a new, empty `AttribBinder`.",105,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Add an attribute to the `AttribBinder`.",105,null],[11,"enable","","Enable all of the vertex attributes contained within the `AttribBinder`.\nThe provided type of `VertexData` is used to to verify the list\nof attributes.",105,null],[11,"bind","","Set up each vertex attribute with the appropriate attribute options\n(using [`glVertexAttribPointer`]\n(http://docs.gl/es2/glVertexAttribPointer)). The `VertexData` type\nparameter is used to get the attribute options for each attribute.",105,null],[11,"fmt","","",100,null],[11,"from","","",100,{"inputs":[{"name":"attriberror"}],"output":{"name":"vertexbinderror"}}],[11,"bind_attrib_pointers","","Set the `AttribBinder` that will contain all of the vertex attributes\nused when rendering.",106,null],[11,"buffer","","Get a reference to underlying OpenGL buffer.",106,null],[11,"buffer_mut","","Get a mutable reference to the underlying OpenGL buffer.",106,null],[11,"buffer","","Get a reference to the underlying OpenGL buffer.",107,null],[11,"buffer_mut","","Get a mutable reference to the underlying OpenGL buffer.",107,null],[11,"new_index_buffer","glitter::context","Create a new, empty index buffer.",4,null],[0,"index_data","glitter","Contains types related to index data, which are used for [`IndexBuffers`]\n(../vertex_buffer/struct.IndexBuffer.html).",null,null],[0,"mem","glitter::index_data","Basic functions for dealing with memory.",null,null],[5,"forget","glitter::index_data::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U16","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"slice","glitter::index_data","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[11,"drop","collections::binary_heap","",108,null],[11,"deref","","",108,null],[11,"deref_mut","","",108,null],[11,"clone","","",109,null],[11,"clone_from","","",109,null],[11,"default","","",109,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",109,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",109,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",109,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",109,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",109,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",109,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",109,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",109,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",109,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",109,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",109,null],[11,"push","","Pushes an item onto the binary heap.",109,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",109,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",109,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",109,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",109,null],[11,"len","","Returns the length of the binary heap.",109,null],[11,"is_empty","","Checks if the binary heap is empty.",109,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",109,null],[11,"clear","","Drops all items from the binary heap.",109,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",109,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"clone","","",111,null],[11,"next","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"from","","",109,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",113,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",109,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",109,null],[11,"extend","","",109,null],[11,"extend","","",109,null],[11,"drop","collections::btree::map","",114,null],[11,"clone","","",114,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",114,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",114,null],[11,"get","","Returns a reference to the value corresponding to the key.",114,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",114,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",114,null],[11,"insert","","Inserts a key-value pair into the map.",114,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",114,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",114,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",114,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",114,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",114,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",114,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"len","","",115,null],[11,"clone","","",115,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"next_back","","",116,null],[11,"len","","",116,null],[11,"into_iter","","",114,null],[11,"drop","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"next_back","","",117,null],[11,"len","","",117,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"len","","",118,null],[11,"clone","","",118,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"len","","",119,null],[11,"clone","","",119,null],[11,"next","","",120,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"len","","",121,null],[11,"next_back","","",120,null],[11,"clone","","",120,null],[11,"next","","",122,null],[11,"next_back","","",122,null],[11,"from_iter","","",114,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",114,null],[11,"extend","","",114,null],[11,"hash","","",114,null],[11,"default","","",114,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",114,null],[11,"partial_cmp","","",114,null],[11,"cmp","","",114,null],[11,"fmt","","",114,null],[11,"index","","",114,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",114,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",114,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",114,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",114,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",114,null],[11,"len","","Returns the number of elements in the map.",114,null],[11,"is_empty","","Returns true if the map contains no elements.",114,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",123,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",123,null],[11,"key","","Returns a reference to this entry&#39;s key.",123,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",124,null],[11,"into_key","","Take ownership of the key.",124,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",124,null],[11,"key","","Gets a reference to the key in the entry.",125,null],[11,"remove_pair","","Take ownership of the key and value from the map.",125,null],[11,"get","","Gets a reference to the value in the entry.",125,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",125,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",125,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",125,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",125,null],[11,"partial_cmp","collections::btree::set","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"cmp","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"hash","","",126,null],[11,"clone","","",126,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",126,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",126,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",126,null],[11,"difference","","Visits the values representing the difference, in ascending order.",126,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",126,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",126,null],[11,"union","","Visits the values representing the union, in ascending order.",126,null],[11,"len","","Returns the number of elements in the set.",126,null],[11,"is_empty","","Returns true if the set contains no elements.",126,null],[11,"clear","","Clears the set, removing all values.",126,null],[11,"contains","","Returns `true` if the set contains a value.",126,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",126,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",126,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",126,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",126,null],[11,"insert","","Adds a value to the set.",126,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",126,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",126,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",126,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",126,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",126,null],[11,"from_iter","","",126,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",126,null],[11,"extend","","",126,null],[11,"extend","","",126,null],[11,"default","","",126,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",126,null],[11,"clone","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"len","","",127,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"len","","",128,null],[11,"clone","","",129,null],[11,"next","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"clone","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"borrow","collections::borrow","",134,null],[11,"clone","","",134,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",134,null],[11,"into_owned","","Extracts the owned data.",134,null],[11,"deref","","",134,null],[11,"cmp","","",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"fmt","","",134,null],[11,"fmt","","",134,null],[11,"hash","","",134,null],[11,"as_ref","","",134,null],[11,"hash","collections::enum_set","",135,null],[11,"cmp","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"fmt","","",135,null],[11,"new","","Returns an empty `EnumSet`.",135,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",135,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",135,null],[11,"clear","","",135,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",135,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",135,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",135,null],[11,"union","","Returns the union of both `EnumSets`.",135,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",135,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",135,null],[11,"remove","","Removes an enum from the EnumSet",135,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",135,null],[11,"iter","","Returns an iterator over an `EnumSet`.",135,null],[11,"sub","","",135,null],[11,"bitor","","",135,null],[11,"bitand","","",135,null],[11,"bitxor","","",135,null],[11,"clone","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"from_iter","","",135,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"clone","collections::linked_list","",137,null],[11,"clone","","",138,null],[11,"default","","",139,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",139,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",139,null],[11,"iter","","Provides a forward iterator.",139,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",139,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",139,null],[11,"len","","Returns the length of the `LinkedList`.",139,null],[11,"clear","","Removes all elements from the `LinkedList`.",139,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",139,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",139,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",139,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",139,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",139,null],[11,"push_front","","Adds an element first in the list.",139,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",139,null],[11,"push_back","","Appends an element to the back of a list",139,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",139,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",139,null],[11,"front_place","","Returns a place for insertion at the front of the list.",139,null],[11,"back_place","","Returns a place for insertion at the back of the list.",139,null],[11,"drop","","",139,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next_back","","",140,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",140,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",140,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"from_iter","","",139,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",139,null],[11,"extend","","",139,null],[11,"extend","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"partial_cmp","","",139,null],[11,"cmp","","",139,null],[11,"clone","","",139,null],[11,"fmt","","",139,null],[11,"hash","","",139,null],[11,"make_place","","",141,null],[11,"pointer","","",141,null],[11,"finalize","","",141,null],[11,"make_place","","",142,null],[11,"pointer","","",142,null],[11,"finalize","","",142,null],[11,"start","core::ops","",143,null],[11,"end","","",144,null],[11,"start","","",145,null],[11,"end","","",145,null],[11,"borrow","collections::vec","",113,null],[11,"borrow_mut","","",113,null],[11,"clone","collections::str","",146,null],[11,"next","","",146,null],[11,"size_hint","","",146,null],[11,"borrow","collections::string","",147,null],[11,"fmt","core::str::pattern","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"haystack","","",149,null],[11,"next","","",149,null],[11,"next_match","","",149,null],[11,"next_reject","","",149,null],[11,"next_back","","",149,null],[11,"next_match_back","","",149,null],[11,"next_reject_back","","",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"haystack","","",150,null],[11,"next","","",150,null],[11,"next_match","","",150,null],[11,"next_reject","","",150,null],[11,"next_back","","",150,null],[11,"next_match_back","","",150,null],[11,"next_reject_back","","",150,null],[11,"clone","","",151,null],[11,"fmt","","",151,null],[11,"haystack","","",151,null],[11,"next","","",151,null],[11,"next_match","","",151,null],[11,"next_reject","","",151,null],[11,"next_back","","",151,null],[11,"next_match_back","","",151,null],[11,"next_reject_back","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"haystack","","",152,null],[11,"next","","",152,null],[11,"next_match","","",152,null],[11,"next_back","","",152,null],[11,"next_match_back","","",152,null],[11,"cmp","collections::string","",147,null],[11,"partial_cmp","","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"new","","Creates a new empty `String`.",147,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",147,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",147,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",147,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",147,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",147,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",147,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",147,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",147,null],[11,"as_str","","Extracts a string slice containing the entire string.",147,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",147,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",147,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",147,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",147,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",147,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",147,null],[11,"push","","Appends the given `char` to the end of this `String`.",147,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",147,null],[11,"truncate","","Shortens this `String` to the specified length.",147,null],[11,"pop","","Removes the last character from the string buffer and returns it.",147,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",147,null],[11,"insert","","Inserts a character into this `String` at a byte position.",147,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",147,null],[11,"len","","Returns the length of this `String`, in bytes.",147,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",147,null],[11,"clear","","Truncates this `String`, removing all contents.",147,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",147,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",147,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",153,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",153,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"clone","","",147,null],[11,"clone_from","","",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"eq","collections::borrow","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::string","",147,null],[11,"ne","","",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",147,null],[11,"fmt","","",147,null],[11,"hash","","",147,null],[11,"add","","",147,null],[11,"index","","",147,null],[11,"index","","",147,null],[11,"index","","",147,null],[11,"index","","",147,null],[11,"index","","",147,null],[11,"index","","",147,null],[11,"index_mut","","",147,null],[11,"index_mut","","",147,null],[11,"index_mut","","",147,null],[11,"index_mut","","",147,null],[11,"index_mut","","",147,null],[11,"index_mut","","",147,null],[11,"deref","","",147,null],[11,"deref_mut","","",147,null],[11,"from_str","","",147,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",155,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"eq","","",155,null],[11,"as_ref","","",147,null],[11,"as_ref","","",147,null],[11,"from","","",147,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",134,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",134,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",147,null],[11,"write_str","","",147,null],[11,"write_char","","",147,null],[11,"drop","","",156,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"next_back","","",156,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",113,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",113,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",113,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",113,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",113,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",113,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",113,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",113,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",113,null],[11,"as_slice","","Extracts a slice containing the entire vector.",113,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",113,null],[11,"set_len","","Sets the length of a vector.",113,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",113,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",113,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",113,null],[11,"retain","","Retains only the elements specified by the predicate.",113,null],[11,"push","","Appends an element to the back of a collection.",113,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",113,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",113,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",113,null],[11,"clear","","Clears the vector, removing all values.",113,null],[11,"len","","Returns the number of elements in the vector.",113,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",113,null],[11,"split_off","","Splits the collection into two at the given index.",113,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",113,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",113,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",113,null],[11,"clone","","",113,null],[11,"clone_from","","",113,null],[11,"hash","","",113,null],[11,"index","","",113,null],[11,"index_mut","","",113,null],[11,"index","","",113,null],[11,"index","","",113,null],[11,"index","","",113,null],[11,"index","","",113,null],[11,"index","","",113,null],[11,"index","","",113,null],[11,"index_mut","","",113,null],[11,"index_mut","","",113,null],[11,"index_mut","","",113,null],[11,"index_mut","","",113,null],[11,"index_mut","","",113,null],[11,"index_mut","","",113,null],[11,"deref","","",113,null],[11,"deref_mut","","",113,null],[11,"from_iter","","",113,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",113,null],[11,"extend","","",113,null],[11,"extend","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","collections::borrow","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::vec","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"partial_cmp","","",113,null],[11,"cmp","","",113,null],[11,"drop","","",113,null],[11,"default","","",113,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",113,null],[11,"as_ref","","",113,null],[11,"as_mut","","",113,null],[11,"as_ref","","",113,null],[11,"as_mut","","",113,null],[11,"from","","",113,null],[11,"from","","",113,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",134,null],[11,"from","","",134,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",157,null],[11,"size_hint","","",157,null],[11,"count","","",157,null],[11,"next_back","","",157,null],[11,"clone","","",157,null],[11,"drop","","",157,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"drop","","",158,null],[11,"clone","collections::vec_deque","",159,null],[11,"drop","","",159,null],[11,"default","","",159,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",159,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",159,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",159,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",159,null],[11,"swap","","Swaps elements at indices `i` and `j`.",159,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",159,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",159,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",159,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",159,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",159,null],[11,"iter","","Returns a front-to-back iterator.",159,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",159,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",159,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",159,null],[11,"len","","Returns the number of elements in the `VecDeque`.",159,null],[11,"is_empty","","Returns true if the buffer contains no elements",159,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",159,null],[11,"clear","","Clears the buffer, removing all values.",159,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",159,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",159,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",159,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",159,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",159,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",159,null],[11,"push_front","","Inserts an element first in the sequence.",159,null],[11,"push_back","","Appends an element to the back of a buffer",159,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",159,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",159,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",159,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",159,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",159,null],[11,"split_off","","Splits the collection into two at the given index.",159,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",159,null],[11,"retain","","Retains only the elements specified by the predicate.",159,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",159,null],[11,"clone","","",160,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"clone","","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"next_back","","",162,null],[11,"drop","","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"next_back","","",163,null],[11,"eq","","",159,null],[11,"partial_cmp","","",159,null],[11,"cmp","","",159,null],[11,"hash","","",159,null],[11,"index","","",159,null],[11,"index_mut","","",159,null],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",159,null],[11,"extend","","",159,null],[11,"extend","","",159,null],[11,"fmt","","",159,null],[11,"from","","",159,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",113,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",164,null],[11,"ne","","",164,null],[11,"hash","","",164,null],[11,"fmt","","",164,null],[11,"clone","","",164,null],[11,"clone","alloc::boxed","",165,null],[11,"pointer","","",166,null],[11,"make_place","","",166,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",166,null],[11,"finalize","","",167,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",165,null],[11,"drop","","",166,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",167,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",167,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",167,null],[11,"default","","",167,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",167,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",167,null],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"partial_cmp","","",167,null],[11,"lt","","",167,null],[11,"le","","",167,null],[11,"ge","","",167,null],[11,"gt","","",167,null],[11,"cmp","","",167,null],[11,"hash","","",167,null],[11,"from","","",167,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",167,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",167,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"deref","","",167,null],[11,"deref_mut","","",167,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[11,"next_back","","",167,null],[11,"call_once","","",167,null],[11,"call_once","","",167,null],[11,"clone","","",167,null],[11,"borrow","","",167,null],[11,"borrow_mut","","",167,null],[11,"as_ref","","",167,null],[11,"as_mut","","",167,null],[8,"SliceConcatExt","glitter::index_data::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",168,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",168,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",168,null],[10,"connect","","",168,null],[11,"hash","core::num","",169,null],[11,"default","","",169,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",169,null],[11,"cmp","","",169,null],[11,"partial_cmp","","",169,null],[11,"lt","","",169,null],[11,"le","","",169,null],[11,"gt","","",169,null],[11,"ge","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"shl","","",169,null],[11,"shl_assign","","",169,null],[11,"shr","","",169,null],[11,"shr_assign","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"add_assign","","",169,null],[11,"sub","","",169,null],[11,"sub_assign","","",169,null],[11,"mul","","",169,null],[11,"mul_assign","","",169,null],[11,"div","","",169,null],[11,"div_assign","","",169,null],[11,"rem","","",169,null],[11,"rem_assign","","",169,null],[11,"not","","",169,null],[11,"bitxor","","",169,null],[11,"bitxor_assign","","",169,null],[11,"bitor","","",169,null],[11,"bitor_assign","","",169,null],[11,"bitand","","",169,null],[11,"bitand_assign","","",169,null],[11,"neg","","",169,null],[11,"eq","core::num::dec2flt","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[11,"fmt","","",170,null],[11,"fmt","","",170,null],[11,"fmt","core::num","",171,null],[11,"eq","","",171,null],[11,"clone","","",171,null],[11,"clone","","",172,null],[11,"fmt","","",172,null],[11,"fmt","","",172,null],[11,"eq","","",173,null],[11,"ne","","",173,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"hash","core::nonzero","",174,null],[11,"fmt","","",174,null],[11,"partial_cmp","","",174,null],[11,"lt","","",174,null],[11,"le","","",174,null],[11,"gt","","",174,null],[11,"ge","","",174,null],[11,"cmp","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",174,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",174,null],[11,"new","core::ptr","Creates a new `Unique`.",175,null],[11,"get","","Dereferences the content.",175,null],[11,"get_mut","","Mutably dereferences the content.",175,null],[11,"deref","","",175,null],[11,"fmt","","",175,null],[11,"new","","Creates a new `Shared`.",176,null],[11,"clone","","",176,null],[11,"deref","","",176,null],[11,"fmt","","",176,null],[11,"hash","core::marker","",177,null],[11,"eq","","",177,null],[11,"partial_cmp","","",177,null],[11,"cmp","","",177,null],[11,"clone","","",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"fmt","","",178,null],[11,"hash","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",145,null],[11,"contains","","# Examples",145,null],[11,"hash","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"clone","","",143,null],[11,"fmt","","",143,null],[11,"contains","","# Examples",143,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"contains","","# Examples",144,null],[11,"hash","","",179,null],[11,"eq","","",179,null],[11,"ne","","",179,null],[11,"clone","","",179,null],[11,"fmt","","",179,null],[11,"from","","",179,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",179,null],[11,"hash","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"clone","","",180,null],[11,"fmt","","",180,null],[11,"contains","","# Examples",180,null],[11,"hash","core::cmp","",181,null],[11,"fmt","","",181,null],[11,"eq","","",181,null],[11,"clone","","",181,null],[11,"reverse","","Reverse the `Ordering`.",181,null],[11,"cmp","","",181,null],[11,"partial_cmp","","",181,null],[11,"fmt","glitter::index_data","",182,null],[11,"fmt","","",182,null],[11,"is","","Returns true if the boxed type is the same as `T`",182,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",182,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",182,null],[11,"is","","Forwards to the method defined on the type `Any`.",182,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",182,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",182,null],[11,"hash","core::any","",183,null],[11,"fmt","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",183,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",184,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",185,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",186,null],[11,"clone","","",186,null],[11,"new","","Creates a new `AtomicBool`.",184,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",184,null],[11,"store","","Stores a value into the bool.",184,null],[11,"swap","","Stores a value into the bool, returning the old value.",184,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",184,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",184,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",184,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",184,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",184,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",184,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",184,null],[11,"new","","Creates a new `AtomicPtr`.",185,null],[11,"load","","Loads a value from the pointer.",185,null],[11,"store","","Stores a value into the pointer.",185,null],[11,"swap","","Stores a value into the pointer, returning the old value.",185,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",185,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",185,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",185,null],[11,"default","","",187,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",187,null],[11,"new","","Creates a new atomic integer.",187,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",187,null],[11,"store","","Stores a value into the atomic integer.",187,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",187,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"fetch_add","","Add to the current value, returning the previous value.",187,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",187,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",187,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",187,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",187,null],[11,"default","","",188,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",188,null],[11,"new","","Creates a new atomic integer.",188,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",188,null],[11,"store","","Stores a value into the atomic integer.",188,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",188,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"fetch_add","","Add to the current value, returning the previous value.",188,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",188,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",188,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",188,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",188,null],[11,"default","","",189,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",189,null],[11,"new","","Creates a new atomic integer.",189,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",189,null],[11,"store","","Stores a value into the atomic integer.",189,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",189,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"fetch_add","","Add to the current value, returning the previous value.",189,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",189,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",189,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",189,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",189,null],[11,"default","","",190,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",190,null],[11,"new","","Creates a new atomic integer.",190,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",190,null],[11,"store","","Stores a value into the atomic integer.",190,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",190,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"fetch_add","","Add to the current value, returning the previous value.",190,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",190,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",190,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",190,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",190,null],[11,"default","","",191,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",191,null],[11,"new","","Creates a new atomic integer.",191,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",191,null],[11,"store","","Stores a value into the atomic integer.",191,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",191,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"fetch_add","","Add to the current value, returning the previous value.",191,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",191,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",191,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",191,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",191,null],[11,"default","","",192,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",192,null],[11,"new","","Creates a new atomic integer.",192,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",192,null],[11,"store","","Stores a value into the atomic integer.",192,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",192,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"fetch_add","","Add to the current value, returning the previous value.",192,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",192,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",192,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",192,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",192,null],[11,"default","","",193,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",193,null],[11,"new","","Creates a new atomic integer.",193,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",193,null],[11,"store","","Stores a value into the atomic integer.",193,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",193,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"fetch_add","","Add to the current value, returning the previous value.",193,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",193,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",193,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",193,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",193,null],[11,"default","","",194,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",194,null],[11,"new","","Creates a new atomic integer.",194,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",194,null],[11,"store","","Stores a value into the atomic integer.",194,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",194,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"fetch_add","","Add to the current value, returning the previous value.",194,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",194,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",194,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",194,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",194,null],[11,"default","","",195,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",195,null],[11,"new","","Creates a new atomic integer.",195,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",195,null],[11,"store","","Stores a value into the atomic integer.",195,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",195,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"fetch_add","","Add to the current value, returning the previous value.",195,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",195,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",195,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",195,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",195,null],[11,"default","","",196,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",196,null],[11,"new","","Creates a new atomic integer.",196,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",196,null],[11,"store","","Stores a value into the atomic integer.",196,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",196,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"fetch_add","","Add to the current value, returning the previous value.",196,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",196,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",196,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",196,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",196,null],[11,"fmt","","",184,null],[11,"fmt","","",185,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",197,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",197,null],[11,"set","","Sets the contained value.",197,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",197,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",197,null],[11,"clone","","",197,null],[11,"default","","",197,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",197,null],[11,"partial_cmp","","",197,null],[11,"lt","","",197,null],[11,"le","","",197,null],[11,"gt","","",197,null],[11,"ge","","",197,null],[11,"cmp","","",197,null],[11,"fmt","","",198,null],[11,"eq","","",198,null],[11,"clone","","",198,null],[11,"new","","Creates a new `RefCell` containing `value`.",199,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",199,null],[11,"borrow_state","","Query the current state of this `RefCell`",199,null],[11,"borrow","","Immutably borrows the wrapped value.",199,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",199,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",199,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",199,null],[11,"clone","","",199,null],[11,"default","","",199,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",199,null],[11,"partial_cmp","","",199,null],[11,"lt","","",199,null],[11,"le","","",199,null],[11,"gt","","",199,null],[11,"ge","","",199,null],[11,"cmp","","",199,null],[11,"deref","","",200,null],[11,"clone","","Copies a `Ref`.",200,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",200,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",201,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",201,null],[11,"deref_mut","","",201,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",202,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",202,null],[11,"get","","Gets a mutable pointer to the wrapped value.",202,null],[11,"default","","",202,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",203,null],[11,"clone","","",203,null],[11,"next","","",203,null],[11,"size_hint","","",203,null],[11,"count","","",203,null],[11,"last","","",203,null],[11,"len","","",203,null],[11,"fmt","","",204,null],[11,"clone","","",204,null],[11,"next","","",204,null],[11,"size_hint","","",204,null],[11,"count","","",204,null],[11,"nth","","",204,null],[11,"last","","",204,null],[11,"len","","",204,null],[11,"fmt","","",205,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",205,null],[11,"next","","",205,null],[11,"size_hint","","",205,null],[11,"fmt","","",206,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",206,null],[11,"next","","",206,null],[11,"size_hint","","",206,null],[11,"fmt","core::iter::range","",207,null],[11,"clone","","",207,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",143,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",145,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",179,null],[11,"next","core::iter::range","",207,null],[11,"size_hint","","",207,null],[11,"next","","",207,null],[11,"size_hint","","",207,null],[11,"next","","",207,null],[11,"size_hint","","",207,null],[11,"next","core::ops","",145,null],[11,"size_hint","","",145,null],[11,"next_back","","",145,null],[11,"next","","",143,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"next_back","","",179,null],[11,"fmt","core::iter::sources","",208,null],[11,"clone","","",208,null],[11,"next","","",208,null],[11,"size_hint","","",208,null],[11,"next_back","","",208,null],[11,"fmt","","",209,null],[11,"next","","",209,null],[11,"size_hint","","",209,null],[11,"next_back","","",209,null],[11,"len","","",209,null],[11,"clone","","",209,null],[11,"default","","",209,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",210,null],[11,"clone","","",210,null],[11,"next","","",210,null],[11,"size_hint","","",210,null],[11,"next_back","","",210,null],[11,"len","","",210,null],[11,"fmt","core::iter","",211,null],[11,"clone","","",211,null],[11,"next","","",211,null],[11,"size_hint","","",211,null],[11,"next_back","","",211,null],[11,"fmt","","",212,null],[11,"clone","","",212,null],[11,"next","","",212,null],[11,"size_hint","","",212,null],[11,"next_back","","",212,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"next","","",213,null],[11,"size_hint","","",213,null],[11,"fmt","","",214,null],[11,"clone","","",214,null],[11,"next","","",214,null],[11,"count","","",214,null],[11,"nth","","",214,null],[11,"find","","",214,null],[11,"last","","",214,null],[11,"size_hint","","",214,null],[11,"next_back","","",214,null],[11,"fmt","","",215,null],[11,"clone","","",215,null],[11,"next","","",215,null],[11,"size_hint","","",215,null],[11,"next_back","","",215,null],[11,"clone","","",216,null],[11,"fmt","","",216,null],[11,"next","","",216,null],[11,"size_hint","","",216,null],[11,"next_back","","",216,null],[11,"clone","","",217,null],[11,"fmt","","",217,null],[11,"next","","",217,null],[11,"size_hint","","",217,null],[11,"next_back","","",217,null],[11,"clone","","",218,null],[11,"fmt","","",218,null],[11,"next","","",218,null],[11,"size_hint","","",218,null],[11,"next_back","","",218,null],[11,"fmt","","",219,null],[11,"clone","","",219,null],[11,"next","","# Overflow Behavior",219,null],[11,"size_hint","","",219,null],[11,"nth","","",219,null],[11,"count","","",219,null],[11,"next_back","","",219,null],[11,"fmt","","",220,null],[11,"clone","","",220,null],[11,"next","","",220,null],[11,"count","","",220,null],[11,"nth","","",220,null],[11,"last","","",220,null],[11,"size_hint","","",220,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",220,null],[11,"is_empty","","Checks if the iterator has finished iterating.",220,null],[11,"clone","","",221,null],[11,"fmt","","",221,null],[11,"next","","",221,null],[11,"size_hint","","",221,null],[11,"clone","","",222,null],[11,"fmt","","",222,null],[11,"next","","",222,null],[11,"size_hint","","",222,null],[11,"fmt","","",223,null],[11,"clone","","",223,null],[11,"next","","",223,null],[11,"nth","","",223,null],[11,"count","","",223,null],[11,"last","","",223,null],[11,"size_hint","","",223,null],[11,"next_back","","",223,null],[11,"fmt","","",224,null],[11,"clone","","",224,null],[11,"next","","",224,null],[11,"nth","","",224,null],[11,"size_hint","","",224,null],[11,"clone","","",225,null],[11,"fmt","","",225,null],[11,"next","","",225,null],[11,"size_hint","","",225,null],[11,"clone","","",226,null],[11,"fmt","","",226,null],[11,"next","","",226,null],[11,"size_hint","","",226,null],[11,"next_back","","",226,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"next","","",227,null],[11,"nth","","",227,null],[11,"last","","",227,null],[11,"count","","",227,null],[11,"size_hint","","",227,null],[11,"next_back","","",227,null],[11,"clone","","",228,null],[11,"fmt","","",228,null],[11,"next","","",228,null],[11,"size_hint","","",228,null],[11,"next_back","","",228,null],[11,"hash","core::option","",229,null],[11,"fmt","","",229,null],[11,"cmp","","",229,null],[11,"partial_cmp","","",229,null],[11,"lt","","",229,null],[11,"le","","",229,null],[11,"gt","","",229,null],[11,"ge","","",229,null],[11,"eq","","",229,null],[11,"ne","","",229,null],[11,"clone","","",229,null],[11,"is_some","","Returns `true` if the option is a `Some` value",229,null],[11,"is_none","","Returns `true` if the option is a `None` value",229,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",229,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",229,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",229,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",229,null],[11,"unwrap_or","","Returns the contained value or a default.",229,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",229,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",229,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",229,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",229,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",229,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",229,null],[11,"iter","","Returns an iterator over the possibly contained value.",229,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",229,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",229,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",229,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",229,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",229,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",229,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",229,null],[11,"unwrap_or_default","","Returns the contained value or a default",229,null],[11,"default","","",229,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",229,null],[11,"fmt","","",230,null],[11,"next","","",230,null],[11,"size_hint","","",230,null],[11,"next_back","","",230,null],[11,"clone","","",230,null],[11,"fmt","","",231,null],[11,"next","","",231,null],[11,"size_hint","","",231,null],[11,"next_back","","",231,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"next","","",232,null],[11,"size_hint","","",232,null],[11,"next_back","","",232,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",229,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",233,null],[11,"hash","core::result","",234,null],[11,"fmt","","",234,null],[11,"cmp","","",234,null],[11,"partial_cmp","","",234,null],[11,"lt","","",234,null],[11,"le","","",234,null],[11,"gt","","",234,null],[11,"ge","","",234,null],[11,"eq","","",234,null],[11,"ne","","",234,null],[11,"clone","","",234,null],[11,"is_ok","","Returns true if the result is `Ok`",234,null],[11,"is_err","","Returns true if the result is `Err`",234,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",234,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",234,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",234,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",234,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",234,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",234,null],[11,"iter","","Returns an iterator over the possibly contained value.",234,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",234,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",234,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",234,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",234,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",234,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",234,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",234,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",234,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",234,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",234,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",234,null],[11,"fmt","","",235,null],[11,"next","","",235,null],[11,"size_hint","","",235,null],[11,"next_back","","",235,null],[11,"clone","","",235,null],[11,"fmt","","",236,null],[11,"next","","",236,null],[11,"size_hint","","",236,null],[11,"next_back","","",236,null],[11,"fmt","","",237,null],[11,"next","","",237,null],[11,"size_hint","","",237,null],[11,"next_back","","",237,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",234,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",238,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",238,null],[11,"next","","",238,null],[11,"size_hint","","",238,null],[11,"count","","",238,null],[11,"nth","","",238,null],[11,"last","","",238,null],[11,"next_back","","",238,null],[11,"clone","","",238,null],[11,"fmt","","",239,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",239,null],[11,"next","","",239,null],[11,"size_hint","","",239,null],[11,"count","","",239,null],[11,"nth","","",239,null],[11,"last","","",239,null],[11,"next_back","","",239,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"next","","",240,null],[11,"size_hint","","",240,null],[11,"next_back","","",240,null],[11,"fmt","","",241,null],[11,"next","","",241,null],[11,"size_hint","","",241,null],[11,"next_back","","",241,null],[11,"fmt","","",242,null],[11,"fmt","","",243,null],[11,"fmt","","",244,null],[11,"fmt","","",245,null],[11,"next","","",242,null],[11,"size_hint","","",242,null],[11,"next","","",243,null],[11,"size_hint","","",243,null],[11,"next","","",244,null],[11,"size_hint","","",244,null],[11,"next","","",245,null],[11,"size_hint","","",245,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"next","","",246,null],[11,"size_hint","","",246,null],[11,"count","","",246,null],[11,"nth","","",246,null],[11,"last","","",246,null],[11,"next_back","","",246,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"next","","",247,null],[11,"size_hint","","",247,null],[11,"count","","",247,null],[11,"nth","","",247,null],[11,"last","","",247,null],[11,"next_back","","",247,null],[11,"fmt","","",248,null],[11,"next","","",248,null],[11,"size_hint","","",248,null],[11,"count","","",248,null],[11,"nth","","",248,null],[11,"last","","",248,null],[11,"next_back","","",248,null],[11,"eq","core::str","",249,null],[11,"ne","","",249,null],[11,"clone","","",249,null],[11,"fmt","","",249,null],[11,"fmt","","",249,null],[11,"fmt","","",250,null],[11,"clone","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",250,null],[11,"fmt","","",250,null],[11,"fmt","","",251,null],[11,"clone","","",251,null],[11,"next","","",251,null],[11,"size_hint","","",251,null],[11,"next_back","","",251,null],[11,"as_str","","View the underlying data as a subslice of the original data.",251,null],[11,"fmt","","",252,null],[11,"clone","","",252,null],[11,"next","","",252,null],[11,"size_hint","","",252,null],[11,"next_back","","",252,null],[11,"as_str","","View the underlying data as a subslice of the original data.",252,null],[11,"fmt","","",253,null],[11,"clone","","",253,null],[11,"next","","",253,null],[11,"size_hint","","",253,null],[11,"count","","",253,null],[11,"last","","",253,null],[11,"nth","","",253,null],[11,"next_back","","",253,null],[11,"len","","",253,null],[11,"fmt","","",254,null],[11,"next","","",254,null],[11,"clone","","",254,null],[11,"fmt","","",255,null],[11,"next","","",255,null],[11,"clone","","",255,null],[11,"next_back","","",254,null],[11,"next_back","","",255,null],[11,"fmt","","",256,null],[11,"next","","",256,null],[11,"clone","","",256,null],[11,"fmt","","",257,null],[11,"next","","",257,null],[11,"clone","","",257,null],[11,"next_back","","",256,null],[11,"next_back","","",257,null],[11,"fmt","","",258,null],[11,"next","","",258,null],[11,"clone","","",258,null],[11,"fmt","","",259,null],[11,"next","","",259,null],[11,"clone","","",259,null],[11,"fmt","","",260,null],[11,"next","","",260,null],[11,"clone","","",260,null],[11,"fmt","","",261,null],[11,"next","","",261,null],[11,"clone","","",261,null],[11,"next_back","","",260,null],[11,"next_back","","",261,null],[11,"fmt","","",262,null],[11,"next","","",262,null],[11,"clone","","",262,null],[11,"fmt","","",263,null],[11,"next","","",263,null],[11,"clone","","",263,null],[11,"next_back","","",262,null],[11,"next_back","","",263,null],[11,"fmt","","",264,null],[11,"clone","","",264,null],[11,"next","","",264,null],[11,"size_hint","","",264,null],[11,"next_back","","",264,null],[11,"fmt","","",265,null],[11,"clone","","",265,null],[11,"next","","",265,null],[11,"size_hint","","",265,null],[11,"next_back","","",265,null],[11,"fmt","","",266,null],[11,"clone","","",266,null],[11,"fmt","core::hash::sip","",267,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",267,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",267,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",267,null],[11,"finish","","",267,null],[11,"clone","","",267,null],[11,"default","","",267,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",268,null],[11,"build_hasher","","",268,null],[11,"clone","","",268,null],[11,"default","","",268,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",269,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",270,null],[11,"finish","","Finishes output and returns any error encountered.",270,null],[11,"field","","Adds a new field to the generated tuple struct output.",271,null],[11,"finish","","Finishes output and returns any error encountered.",271,null],[11,"entry","","Adds a new entry to the set output.",272,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",272,null],[11,"finish","","Finishes output and returns any error encountered.",272,null],[11,"entry","","Adds a new entry to the list output.",273,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",273,null],[11,"finish","","Finishes output and returns any error encountered.",273,null],[11,"entry","","Adds a new entry to the map output.",274,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",274,null],[11,"finish","","Finishes output and returns any error encountered.",274,null],[11,"partial_cmp","core::fmt","",275,null],[11,"eq","","",275,null],[11,"cmp","","",275,null],[11,"hash","","",275,null],[11,"default","","",275,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"clone","","",276,null],[11,"fmt","","",276,null],[11,"fmt","","",276,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",277,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",277,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",277,null],[11,"write_fmt","","Writes some formatted information into this instance",277,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",277,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",277,null],[11,"align","","Flag indicating what form of alignment was requested",277,null],[11,"width","","Optionally specified integer width that the output should be",277,null],[11,"precision","","Optionally specified precision for numeric types",277,null],[11,"sign_plus","","Determines if the `+` flag was specified.",277,null],[11,"sign_minus","","Determines if the `-` flag was specified.",277,null],[11,"alternate","","Determines if the `#` flag was specified.",277,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",277,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",277,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",277,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",277,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",277,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",277,null],[11,"write_str","","",277,null],[11,"write_char","","",277,null],[11,"write_fmt","","",277,null],[11,"fmt","","",275,null],[11,"fmt","core::marker","",177,null],[11,"fmt","core::cell","",197,null],[11,"fmt","","",199,null],[11,"fmt","","",200,null],[11,"fmt","","",201,null],[11,"fmt","","",202,null],[3,"Windows","glitter::index_data::slice","An iterator over overlapping subslices of length `size`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[4,"IndexDatumType","glitter::index_data","The set of possible [`IndexDatum`](trait.IndexDatum.html) types.",null,null],[13,"UnsignedByte","","Unsigned 8-bit index data.",278,null],[13,"UnsignedShort","","Unsigned 16-bit index data.",278,null],[8,"IndexData","","Indicates that a type can be coerced to a `u8` slice that can\nbe treated as a stream of index data.",null,null],[10,"index_datum_type","","Return the data type that this index data should be treated as.",279,{"inputs":[],"output":{"name":"indexdatumtype"}}],[10,"index_bytes","","Create a byte slice of index data from `self`.",279,null],[10,"index_elements","","Return the number of index elements that `self` contains.",279,null],[8,"IndexDatum","","A single value that can be treated as a single index.",null,null],[10,"index_datum_type","","Return the data type this datum corresponds to.",280,{"inputs":[],"output":{"name":"indexdatumtype"}}],[0,"uniform_data","glitter","Contains types that represent uniform data, which is used\nfor methods such as [`gl.set_uniform`]\n(../context/program_context/trait.ContextProgramExt.html#method.set_uniform).",null,null],[4,"UniformPrimitiveType","glitter::uniform_data","The basic value types that are composed in the [`UniformDatumTypes`]\n(enum.UniformDatumType.html).",null,null],[13,"Float","","A 32-bit floating point value.",281,null],[13,"Int","","A 32-bit signed integer value.",281,null],[4,"UniformDatumType","","The basic types that can be used as uniform values in a program object.",null,null],[13,"Vec1","","A single scalar value, containing one primitive (essentially a vector\nof one component).",282,null],[13,"Vec2","","A vector with 2 components.",282,null],[13,"Vec3","","A vector with 3 components.",282,null],[13,"Vec4","","A vector with 4 components.",282,null],[13,"Matrix2x2","","A 2x2 matrix of floating-point values.",282,null],[13,"Matrix3x3","","A 3x3 matrix of floating-point values.",282,null],[13,"Matrix4x4","","A 4x4 matrix of floating-point values.",282,null],[8,"UniformData","","A type that can be set to a uniform value in a program object, using\nthe [`gl.set_uniform`]\n(../context/program_context/trait.ContextProgramExt.html#method.set_uniform)\nmethod. A `UniformData` type can be composed of one or more\n[`UniformDatums`](trait.UniformDatum.html), and this is likely the type\nthat user types will implement.",null,null],[10,"uniform_datum_type","","Return the type that this uniform data should be treated as.",283,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[10,"uniform_bytes","","Create a byte slice of uniform data from `self`.",283,null],[10,"uniform_elements","","Return the number of uniform data elements that `self` contains.",283,null],[8,"UniformDatum","","A single uniform value, which corresponds to a single\nprimitive GLSL uniform type.",null,null],[10,"uniform_datum_type","","Return the data type this datum corresponds to.",284,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[8,"UniformPrimitive","","A single, basic value that can be composed to make a [`UniformDatum`]\n(trait.UniformDatum.html). Scalar values are an example of a `UniformPrimitive`.",null,null],[10,"uniform_primitive_type","","Return the data type this primitive corresponds to.",285,{"inputs":[],"output":{"name":"uniformprimitivetype"}}],[0,"types","glitter","Contains miscellaneous general-purpose OpenGL types.",null,null],[3,"Color","glitter::types","A color, with floating-point RGBA components.",null,null],[12,"r","","The color&#39;s red component.",286,null],[12,"g","","The color&#39;s green component.",286,null],[12,"b","","The color&#39;s blue component.",286,null],[12,"a","","The color&#39;s alpha component.",286,null],[3,"Viewport","","An OpenGL viewport, with an origin and size, with integer components.",null,null],[12,"x","","The X coordinate of the viewport&#39;s origin",287,null],[12,"y","","The Y coordinate of the viewport&#39;s origin",287,null],[12,"width","","The viewport&#39;s width",287,null],[12,"height","","The viewport&#39;s height",287,null],[3,"BufferBits","","The possible buffers that the active framebuffer may contain.",null,null],[4,"Capability","","The OpenGL drawing capabilities that can be enabled or disabled.",null,null],[13,"Blend","","Blend newly-computed fragment colors with the current\nvalues in the color buffer.",288,null],[13,"CullFace","","Cull polygons, based on their winding in window coordinates.",288,null],[13,"DepthTest","","Perform a depth test for each fragment, only drawing\nfragments that are not obscured by other geometry.\nAlso updates the depth buffer appropriately.",288,null],[13,"Dither","","Dither color components or indices.",288,null],[13,"PolygonOffsetFill","","When filling a polygon, add an offset to\neach fragment&#39;s depth value.",288,null],[13,"SampleAlphaToCoverage","","When multisampling, use the alpha value from the sample\nlocation.",288,null],[13,"SampleCoverage","","When multisampling, use the preset sample coverage value\nas the alpha value.",288,null],[13,"ScisscorTest","","Only draw fragments within the scissor rectangle.",288,null],[13,"StencilTest","","Perform a stencil test for each fragment, only drawing\nfragments that pass the currently-set stencil operation.\nAlso updates the stencil buffer appropriately.",288,null],[4,"GLError","","The various possible OpenGL errors.",null,null],[13,"InvalidEnum","","Indicates that an unexpected enum value was passed to a function.",289,null],[13,"InvalidValue","","Indicates that a function was passed an argument with a\nvalue that had an unexpected value (such as passing a negative\nvalue to a function that only expects positive arguments).",289,null],[13,"InvalidOperation","","Indicates that a particular operation was attempted that is\nnot allowed, often resulting from an unexpected pairing\nof arguments.",289,null],[13,"InvalidFramebufferOperation","","Indicates that a particular operation attempted to use a\nframebuffer that is not framebuffer-complete.",289,null],[13,"OutOfMemory","","Indicates that the OpenGL driver could not allocate\nenough memory to satisfy a request.",289,null],[13,"FramebufferError","","Indicates a framebuffer-related error.",289,null],[13,"Message","","Indicates an error with a message attached (such as\na message from an info log, or an error message\noriginating from glitter).",289,null],[4,"GLFramebufferError","","The possible framebuffer-incomplete errors.",null,null],[13,"IncompleteAttachment","","Not all framebuffer attachments are [attachment-complete]\n(https://www.opengl.org/wiki/Framebuffer_Object#Attachment_Completeness).",290,null],[13,"IncompleteDimensions","","Not all attachments have the same dimensions.",290,null],[13,"IncompleteMissingAttachment","","The framebuffer has no attachments.",290,null],[13,"Unsupported","","The combination of attachment formats is unsupported by the current\nOpenGL implementation.",290,null],[4,"DrawingMode","","The primitive drawing modes for drawing raw vertex data.",null,null],[13,"Points","","Draw each vertex as a single point.",291,null],[13,"LineStrip","","Draw a connected line segment, where each vertex is connected\nto the next. The first and last vertex are treated as the\nstart and end points.",291,null],[13,"LineLoop","","Draw a self-connected line segment, where each vertex is connected\nto the next, and the last vertex connects to the first.",291,null],[13,"Lines","","Draw each pair of vertices as individual line segments.",291,null],[13,"TriangleStrip","","Draw the vertices as a strip of triangles.\nThe first three vertices form the first triangle, then\nthe next vertex plus the previous two vertices form the next\ntriangle, and so on. For example, vertices v1, v2, and v3 form\nthe first triangle, then vertices v2, v3, and v4 form the next,\nand so on.",291,null],[13,"TriangleFan","","Draw the vertices as a triangle fan. The first vertex, v1\nis the fan&#39;s &#39;center&#39;. Vertices v2 and v3 form the first triangle\nwith the center, v1. Then vertices v3, v4, and v1 form the next\ntriangle, then vertices v4, v5, and v1, and so on.",291,null],[13,"Triangles","","Draw each group of three vertices as a triangle.",291,null],[4,"DataType","","The different OpenGL data types.",null,null],[13,"Byte","","A signed 8-bit byte.",292,null],[13,"UnsignedByte","","An unsigned 8-bit byte.",292,null],[13,"Short","","A signed 16-bit short.",292,null],[13,"UnsignedShort","","An unsigned 16-bit short.",292,null],[13,"Fixed","","A signed 32-bit, fixed-point number in 16.16 form.",292,null],[13,"Float","","A 32-bit, IEEE floating-point number.",292,null],[17,"COLOR_BUFFER_BIT","","The color buffer, which stores color information\nfor each fragment (or pixel).",null,null],[17,"DEPTH_BUFFER_BIT","","The depth buffer, which stores distance information\nfor each fragment when depth testing is enabled.",null,null],[17,"STENCIL_BUFFER_BIT","","The stencil buffer, which stores information about\nwhich fragments should be kept or discarded when\nstencil testing is enabled.",null,null],[17,"BLEND","","Blend newly-computed fragment colors with the current\nvalues in the color buffer.",null,null],[17,"CULL_FACE","","Cull polygons, based on their winding in window coordinates.",null,null],[17,"DEPTH_TEST","","Perform a depth test for each fragment, only drawing\nfragments that are not obscured by other geometry.\nAlso updates the depth buffer appropriately.",null,null],[17,"DITHER","","Dither color components or indices.",null,null],[17,"POLYGON_OFFSET_FILL","","When filling a polygon, add an offset to\neach fragment&#39;s depth value.",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","When multisampling, use the alpha value from the sample\nlocation.",null,null],[17,"SAMPLE_COVERAGE","","When multisampling, use the preset sample coverage value\nas the alpha value.",null,null],[17,"SCISSCOR_TEST","","Only draw fragments within the scissor rectangle.",null,null],[17,"STENCIL_TEST","","Perform a stencil test for each fragment, only drawing\nfragments that pass the currently-set stencil operation.\nAlso updates the stencil buffer appropriately.",null,null],[17,"POINTS","","Draw each vertex as a single point.",null,null],[17,"LINE_STRIP","","Draw a connected line segment, where each vertex is connected\nto the next. The first and last vertex are treated as the\nstart and end points.",null,null],[17,"LINE_LOOP","","Draw a self-connected line segment, where each vertex is connected\nto the next, and the last vertex connects to the first.",null,null],[17,"LINES","","Draw each pair of vertices as individual line segments.",null,null],[17,"TRIANGLE_STRIP","","Draw the vertices as a strip of triangles.\nThe first three vertices form the first triangle, then\nthe next vertex plus the previous two vertices form the next\ntriangle, and so on. For example, vertices v1, v2, and v3 form\nthe first triangle, then vertices v2, v3, and v4 form the next,\nand so on.",null,null],[17,"TRIANGLE_FAN","","Draw the vertices as a triangle fan. The first vertex, v1\nis the fan&#39;s &#39;center&#39;. Vertices v2 and v3 form the first triangle\nwith the center, v1. Then vertices v3, v4, and v1 form the next\ntriangle, then vertices v4, v5, and v1, and so on.",null,null],[17,"TRIANGLES","","Draw each group of three vertices as a triangle.",null,null],[17,"BYTE","","A signed 8-bit byte.",null,null],[17,"UNSIGNED_BYTE","","An unsigned 8-bit byte.",null,null],[17,"SHORT","","A signed 16-bit short.",null,null],[17,"UNSIGNED_SHORT","","An unsigned 16-bit short.",null,null],[17,"FIXED","","A signed 32-bit, fixed-point number in 16.16 form.",null,null],[17,"FLOAT","","A 32-bit, IEEE floating-point number.",null,null],[8,"GLObject","","An OpenGL object.",null,null],[16,"Id","","The type of the object&#39;s internal ID.",293,null],[10,"from_raw","","Get a new object from an OpenGL ID.",293,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[10,"id","","Get the object&#39;s ID.",293,null],[11,"into_raw","","Consume the object without cleaning up its resources, returning the\nobject&#39;s ID.",293,null],[11,"rgba","","Create a new color, with the specified RGBA values.",286,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"clone","","",287,null],[11,"new","","Create a new viewport, with the given X and Y coordinates as the origin\nand the given width and height as the size.",287,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"hash","","",294,null],[11,"cmp","","",294,null],[11,"partial_cmp","","",294,null],[11,"lt","","",294,null],[11,"le","","",294,null],[11,"gt","","",294,null],[11,"ge","","",294,null],[11,"clone","","",294,null],[11,"eq","","",294,null],[11,"ne","","",294,null],[11,"fmt","","",294,null],[11,"empty","","Returns an empty set of flags.",294,{"inputs":[],"output":{"name":"bufferbits"}}],[11,"all","","Returns the set containing all flags.",294,{"inputs":[],"output":{"name":"bufferbits"}}],[11,"bits","","Returns the raw value of the flags currently stored.",294,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",294,{"inputs":[{"name":"glbitfield"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",294,{"inputs":[{"name":"glbitfield"}],"output":{"name":"bufferbits"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",294,null],[11,"is_all","","Returns `true` if all flags are currently set.",294,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",294,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",294,null],[11,"insert","","Inserts the specified flags in-place.",294,null],[11,"remove","","Removes the specified flags in-place.",294,null],[11,"toggle","","Toggles the specified flags in-place.",294,null],[11,"bitor","","Returns the union of the two sets of flags.",294,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",294,null],[11,"bitand","","Returns the intersection between the two sets of flags.",294,null],[11,"sub","","Returns the set difference of the two sets of flags.",294,null],[11,"not","","Returns the complement of this set of flags.",294,null],[11,"from_iter","","",294,{"inputs":[{"name":"t"}],"output":{"name":"bufferbits"}}],[11,"hash","","",288,null],[11,"eq","","",288,null],[11,"clone","","",288,null],[11,"fmt","","",288,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",288,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",288,null],[11,"fmt","","",289,null],[11,"fmt","","",289,null],[11,"description","","",289,null],[11,"cause","","",289,null],[11,"fmt","","",290,null],[11,"fmt","","",290,null],[11,"description","","",290,null],[11,"from","","",289,{"inputs":[{"name":"glframebuffererror"}],"output":{"name":"glerror"}}],[11,"hash","","",291,null],[11,"eq","","",291,null],[11,"clone","","",291,null],[11,"fmt","","",291,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",291,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",291,null],[11,"hash","","",292,null],[11,"eq","","",292,null],[11,"clone","","",292,null],[11,"fmt","","",292,null],[11,"from_gl","","Convert from a raw OpenGL integer value to an enum variant.\nReturns an error if the value is not a valid enum variant.",292,{"inputs":[{"name":"glenum"}],"output":{"name":"result"}}],[11,"gl_enum","","Return the OpenGL integer value for a given enum variant.",292,null],[11,"uniform_datum_type","cgmath::vector","",295,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"uniform_datum_type","","",296,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"uniform_datum_type","","",297,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"uniform_datum_type","cgmath::matrix","",298,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"uniform_datum_type","","",299,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"uniform_datum_type","","",300,{"inputs":[],"output":{"name":"uniformdatumtype"}}],[11,"attrib_type","cgmath::vector","",295,{"inputs":[],"output":{"name":"vertexattributetype"}}],[11,"attrib_type","","",296,{"inputs":[],"output":{"name":"vertexattributetype"}}],[11,"attrib_type","","",297,{"inputs":[],"output":{"name":"vertexattributetype"}}],[11,"from","glitter::image_data","",86,{"inputs":[{"name":"p"}],"output":{"name":"pixel"}}],[11,"from","","",92,{"inputs":[{"name":"i"}],"output":{"name":"pixels"}}],[0,"prelude","glitter","Re-exports essential extension traits. Everything exported in this module\nshould be used anywhere that glitter is used.",null,null],[14,"offset_of!","","Compute the offset of a field within a struct type.",null,null],[14,"impl_vertex_data!","","Implement the [`VertexData`](vertex_data/trait.VertexData.html) trait\nfor a struct. Each field of the struct must that is part of the\n`VertexData` implementation must be a type that implements [`VertexDatum`]\n(vertex_data/trait.VertexDatum.html).",null,null],[14,"attrib_pointers!","","Create an [`AttribBinder`](vertex_buffer/struct.AttribBinder.html) from\na set of associations from vertex attribute names to [`ProgramAttribs`]\n(program/struct.ProgramAttrib.html).",null,null]],"paths":[[8,"ContextBufferExt"],[8,"ArrayBufferContext"],[8,"ElementArrayBufferContext"],[8,"BufferBinding"],[3,"ContextOf"],[3,"ArrayBufferBinding"],[3,"ElementArrayBufferBinding"],[3,"BufferBinderOf"],[3,"ArrayBufferBinder"],[3,"ElementArrayBufferBinder"],[4,"FramebufferTarget"],[4,"FramebufferAttachment"],[8,"ContextFramebufferExt"],[8,"ContextFramebufferBuilderExt"],[8,"FramebufferContext"],[3,"FramebufferBuilder"],[3,"FramebufferBinder"],[8,"ContextProgramBuilderExt"],[8,"ContextProgramExt"],[8,"ProgramContext"],[3,"ProgramBuilder"],[3,"ProgramBinder"],[3,"UnknownProgramAttrib"],[3,"UnknownProgramUniform"],[8,"ContextRenderbufferBuilderExt"],[8,"ContextRenderbufferExt"],[8,"RenderbufferContext"],[3,"RenderbufferBuilder"],[3,"RenderbufferBinder"],[8,"ContextTextureBuilderExt"],[8,"ContextTextureExt"],[8,"TextureBinding"],[3,"Texture2dBuilder"],[3,"Texture2dBinding"],[3,"TextureCubeMapBinding"],[3,"Texture2dBinder"],[3,"TextureCubeMapBinder"],[3,"TextureUnitsOf"],[8,"TextureUnit"],[8,"TextureUnit0Context"],[8,"TextureUnit1Context"],[8,"TextureUnit2Context"],[8,"TextureUnit3Context"],[8,"TextureUnit4Context"],[8,"TextureUnit5Context"],[8,"TextureUnit6Context"],[8,"TextureUnit7Context"],[8,"TextureUnitBinding2d"],[8,"TextureUnitBindingCubeMap"],[3,"TextureUnit0"],[3,"TextureUnit1"],[3,"TextureUnit2"],[3,"TextureUnit3"],[3,"TextureUnit4"],[3,"TextureUnit5"],[3,"TextureUnit6"],[3,"TextureUnit7"],[3,"TextureUnitBindingOf"],[3,"TextureSampler"],[8,"ContextExt"],[4,"BufferDataUsage"],[4,"BufferBindingTarget"],[3,"Buffer"],[4,"ShaderType"],[8,"ContextShaderBuilderExt"],[8,"ContextShaderExt"],[3,"Shader"],[3,"ShaderBuilder"],[3,"ProgramAttrib"],[3,"ProgramUniform"],[3,"Program"],[3,"Framebuffer"],[4,"RenderbufferTarget"],[3,"Renderbuffer"],[4,"Tx2dImageTarget"],[4,"TxCubeMapImageTarget"],[4,"TextureBindingTarget"],[4,"TextureFilter"],[4,"TextureMipmapFilter"],[4,"TextureWrapMode"],[8,"ImageTargetType"],[8,"TextureType"],[3,"Texture"],[3,"Tx2d"],[3,"TxCubeMap"],[3,"VariantTexture2d"],[3,"Pixel"],[3,"ImageFormat"],[4,"TexelType"],[4,"TexelFormat"],[4,"RenderbufferFormat"],[8,"Image2d"],[3,"Pixels"],[3,"VertexAttribute"],[3,"VertexAttributeType"],[8,"VertexData"],[8,"VertexDatum"],[8,"VertexPrimitive"],[8,"VertexBytes"],[4,"AttribAddError"],[4,"VertexBindError"],[8,"ContextVertexBufferExt"],[8,"VertexBufferContext"],[8,"IndexBufferContext"],[3,"AttribError"],[3,"AttribBinder"],[3,"VertexBuffer"],[3,"IndexBuffer"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"SliceConcatExt"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[4,"IndexDatumType"],[8,"IndexData"],[8,"IndexDatum"],[4,"UniformPrimitiveType"],[4,"UniformDatumType"],[8,"UniformData"],[8,"UniformDatum"],[8,"UniformPrimitive"],[3,"Color"],[3,"Viewport"],[4,"Capability"],[4,"GLError"],[4,"GLFramebufferError"],[4,"DrawingMode"],[4,"DataType"],[8,"GLObject"],[3,"BufferBits"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"]]};
initSearch(searchIndex);
